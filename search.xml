<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[分享个人命名方式]]></title>
    <url>%2Fspecificate-doc%2F</url>
    <content type="text"><![CDATA[把一件平凡的事情做好，很平凡。把一件平凡的事情坚持的做好，很不平凡。前言如果说计算机科学只存在两个难题：缓存失效和命名。那么我就觉得命名的难点只有两个：词汇量和坚持贯彻执行制定的规范。最近在知乎上看到这个：作为程序员，有没有让你感到既无语又崩溃的程序命名？。顿时感慨万千，因为命名对于程序员来说是就是一个难题，有时候因为命名，可能会引起别人的误导，疑惑等，对开发效率，项目的质量影响可大可小。今天，也分享下最近自己在使用的命名习惯，当然只是个人习惯。更希望能在评论区看到大家推荐的命名方式，互相学习，交流。关于整篇内容，主要提及两个：1.如何写出让别人容易读懂的命名2.针对不同的对象，使用对象命名的格式盘点那些难以读懂的命名首先，先盘点下有哪些命名的一些方式是很难让别人读懂的。这些情况，大家看到就应该在开发上尽量避免下。1.单词拼写错误举个例子12//提交表单（把 Form 写成了 From ）submitFrom()&#123;...&#125; 之前写文章也有说过，单词拼写正确可以说是一个底线了。如果单词拼写错误，比如 from 和 form 都是正确的单词，但完全不一样的意思，如果把 from 写成 form ，以后读代码的人（也可能是你自己），很有可能会懵逼。 2.中英文混用 单词拼写错误会误导别人，中英文混用这个命名方式就可以说让人云里雾里的感觉，不会误导，只会看不懂。 比如下面 1let chanpinList=[]; 这个变量名，一开始不知道是什么，注释也没有，完全懵逼。后来看了需求，才知道这个的意思是：产品列表。 3.以1-9，a-z命名 这个情况相信大家都会遇到过，比如页面上有几个按钮，有人命名成 btn1，btn2，btn3，btn4…。或者 btnA，btnB，btnC，btnD。这样的命名看似简单，但实际上从这些命名里面读取不到任何信息，以后会可能会痛苦些。 4.混用命名格式 这个可以说没那么可恨，但是看着就别扭，比如表示评论列表，有地方这样命名：comments，另一个地方这样命名： comment-list，还有这样命名： commentList。几种规范混在一起，就感觉不规范了。 还用一种虽然一般不会出现的情况，也遇见了。比如一个地方有添加供应商的按钮，命名是：addSupplier 。在另一个地方也有相同的功能按钮，完全一样，结果命名是：addSupplierInfo 。当时就以为这两个不是同一个功能，造成了误会。 5.强制中文拼音命名 有些名词，被中国人创造出来（淘宝-taobao，微博-weibo），没有英文翻译的。就可以用中文拼音命名，其他的都建议用英文。 但是偏偏有时候就算有英文的单词，有些人还是用中文拼音命名，比如一个文章列表，很多人就是没用 articleList，直接写 wenzhangliebiao。但是看的时候，一定会懵逼一会。 6.强制简写 简介虽然可以让命名看着更加的简洁，但是有时却会遇上强制简写的命名，比如一个函数是提交用户评论信息的功能。原本以为是：handleCommentSubmit/submitComment/publishComment。结果后来一看–tjyhpl。强制简写还是用拼音的简写，后来让他改一下，改成了ac。后来一问才知道他想表达的意思是 addComment ，当时差点动手了。 7.单复数不分 这个情况不算恶劣，只算是一种规范吧，之前有分别有两个操作函数，一个是下载全部订单数据，一个是下载当前订单数据。但是两个函数的命名，一个是downloadOrderData，另一个是downloadOrder。这样也产生了一点懵逼感。 面对这样的情况，建议还是区分下单复数，downloadOrder，downloadOrderAll/downloadOrderList。区分了单复数的命名，如果有返回值，也可以让别人大概知道，单数可能就是返回单个记录，复数可能返回一个数组。 8.正反义词错用 这个情况同上，不算是恶劣，只能算是不规范。比如：分别有两个操作函数一个是显示弹窗，一个是关闭弹窗。结果命名上面，一个是 showEditDialog 。另一个是 closeEditDialog 。 上面的案例，show 和 close ，一个是显示，一个是关闭，显然不是正反义词。应该出现的姿势是，showEditDialog 和 hideEditDialog ，或者 openEditDialog 和 closeEditDialog 9.为所欲为的命名 还有其它的搞笑命名，在知乎上面看到的情况，别人遇到的情况。大家移步到知乎吧，这个不重复太多。 作为程序员，有没有让你感到既无语又崩溃的程序命名？。 命名相关格式说完了命名第一个，命名单词应该正确的书写之后。再来说下命名的相关格式在说自己的命名实例之前，先说下不同的命名对象，命名方式是不一样的。具体如下： 待命名对象 推荐名称 图片 小写字母，‘-’或者‘_’ 分割 css（class,id） ‘-’ 分割 文件，变量 小驼峰命名 js类（class） 大驼峰命名 常量 大写字母，‘_’ 分割 临时变量，私有变量 ‘_’ 开头，驼峰命名 HTML命名在说命名 HTML 命名之前，先说下布局的三个概念：模块( module )和元件( unit ) 模块：各种常见的网页内容模块，通常可以重复使用的较大的整体，比如导航、菜单、幻灯、图文列表等。命名前面建议带有 m- 元件：各种常见的网页内容元件，比如按钮、标题、输入框等。命名前面建议带有 u- 两者关系，模块包含元件，元件组成模块。 小小实例 看到上面的一个小弹窗。整个弹窗，当成一个模块。可以把标题，提示内容，按钮当做元件。HTML 代码就如下，CSS , JS 代码就不贴了。模块就带 m- ，元件就带 u- 1234567891011&lt;div class="m-alert"&gt; &lt;div class="m-box"&gt; &lt;div class="m-box-inner"&gt; &lt;div class="u-title"&gt;提示2&lt;/div&gt; &lt;div class="u-content"&gt;这里是提示内容2&lt;/div&gt; &lt;/div&gt; &lt;div class="m-box-buttons"&gt; &lt;span class="u-btn-success"&gt;确定&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 至于这样的写法有什么优劣，注意事项，这里就不展开讲了，以后再写文章。 JavaScript命名在js命名里面，应该只有四种命名方式：小驼峰(productList)，大驼峰(ProductList)，大写字符，下划线分割（PRODUCT_LIST），下划线开头+小驼峰(_productList) 1.按照类型命名 小驼峰 在js写法里面，小驼峰命名应该是最多的一种。变量，函数一般而言都是使用小驼峰命名。 12//登录处理函数let handleLogin=function()&#123;&#125; 大驼峰 在es6之前，js还没有class的概念，但是也组织不了开发者模拟class。现在有了class，自然而然，class的命名规范就更离不开了。关于class的命名规范，应该很多人都是习惯用大驼峰命名。 1234//创建一个类class Person&#123; //...&#125; 常量 常量建议还是使用大写字符+下划线命名。 12//配置最大金额const PRICE_MAX=10000; 私有变量 私有变量相对于外面作用域而言，为了区分变量是公用的，还是私有的。建议命名上面就做下区分，私有变量建议使用下划线开头+小驼峰命名方式。 12345678910let myObj=&#123; name:'守候', setName()&#123; //保存当前的this let _this=this; setTimeOut(function()&#123; alert(_this.name) &#125;,1000) &#125;&#125; 按职责命名 函数命名，一般都是动词开头。 获取值 如果函数是为了获取值(函数最后会返回一个值的)，函数前面建议带有get。 1234//根据 ID 获取用户信息function getUserInfo(id)&#123; &#125; 设置值 如果函数是为了设置值(函数最后会返回一个值的)，函数执行就是为了给某一个变量赋值，函数前面建议带有set。 1234//设置用户信息function setUserInfo()&#123; &#125; 处理动作 如果函数是为了处理一些操作，比如登录，注册，渲染列表等。那么就建议命名前面带有handle。 12345678//分页操作handleChangeCurrent(val)&#123; &#125;//注册操作handleRegister()&#123; &#125; 这个处理动作，有些开发者也是习惯直接以动作开始。openDialog，closeDialog等。 目录，文件，图片命名 目录，文件名称的命名规则 统一小驼峰命名法。 目录，文件 建议命名 首页 index，index.html 搜索页面 search，search.html 产品列表 productList，productList.html 产品详细页面 productDetail，productDetail.html 新闻列表 newslist，newslist.html 新闻详细页面 newsdetail，newsdetail.html 评论列表 commentList，commentList.html 关于我们 about，about.html 如果发现名称过长，可以在团队约定好简写格式：比如 product 简写成 pro 。 图片命名规范 如果是通用性质的图片，例如LOGO，菜单，侧边栏，背景等，就直接使用小写字母命名。比如：logo.jpg ，menu.jpg，aside.jpg，bg.jpg。 如果不是通用的图片，就建议根据类别-模块-功能的格式。使用小写字母，‘-’或者‘_’分割，如下例子： 图片名称 意义 btn-submit-comment.jpg 提交评论的按钮 bg-product-list.jpg 产品列表模块的背景 icon-views.png 浏览数的图标 icon-btn-vote.png 投票按钮 ad-news-aside.jpg 在新闻侧边栏的广告图片]]></content>
      <categories>
        <category>代码规范</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[阻止Windows10在睡眠（合盖）时被唤醒]]></title>
    <url>%2Fwindow-sys%2F</url>
    <content type="text"><![CDATA[Windows 的睡眠是个好东西，这让 Windows 也有了 Mac 的合盖即走的功能。在不出意外的情况下合盖即走与 Mac 的体验相差无异。虽然之前有睡眠后无法唤醒的报道，不过我想都 8102 年了应该不会再有这种大问题吧，所以也没怎么在意一直这么用着。直到昨天下午在我合盖之后把电脑放进包里之后，发生了一件令人发指的事情，电脑被计划任务的自动更新唤醒了进入了更新状态。幸好发现的及时赶紧拿了出来，不过还是非常的烫手（在这里要吐槽一下这辣鸡自动更新的CPU使用）。再吐槽一下微软的奇葩设定，合盖睡眠也要唤醒自动更新，结果就是自动更新带来的热量差点没出大事，原本我看到一句开玩笑的话“不自动更新你的电脑就要爆炸啦”，这回我觉得按它的自动更新我的电脑真的会爆炸。好像有点跑题了，那么说回正题，避免电脑在睡眠的时候被系统意外唤醒（这里不包括主动唤醒）。使用一年下来目前已知两种被系统意外唤醒的情况：自动维护通常是在半夜二点的时候会被唤醒，在 控制面板&gt;系统和安全&gt;安全和维护&gt;自动维护 中把 “允许预定维护在预定时间唤醒我的计算机” 取消勾选即可。不人性化的自动更新已经被万人吐槽了，只要不睡眠的时候强制唤醒来更新我没意见。在 2017 年底的时候还可以手动修改任务计划取消“唤醒计算机运行此任务”。Win+R 输入 taskschd.msc ，在 任务计划程序-任务计划程序库-Microsoft-Windows-UpdateOrchestrator 中找到 Reboot ，右键打开 Reboot 项的属性，在条件页面中取消“唤醒计算机运行此任务”的勾选。最后，希望微软的自动更新动动脑子，人性化一点，别再这么令人发指了！]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>windows操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大厂面经]]></title>
    <url>%2Ffactory-interview%2F</url>
    <content type="text"><![CDATA[以下面试题来自腾讯、阿里、网易、饿了么、美团、拼多多、百度等等大厂综合起来常考的题目。如何写一个漂亮的简历简历不是一份记流水账的东西，而是让用人方了解你的亮点的。平时有在做一些修改简历的收费服务，也算看过蛮多简历了。很多简历都有如下特征喜欢说自己的特长、优点，用人方真的不关注你的性格是否阳光等等个人技能能够占半页的篇幅，而且长得也都差不多项目经验流水账，比如我会用这个 API 实现了某某功能简历页数过多，真心看不下去以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。除非你呆过大厂或者教育背景不错或者技术栈符合人家要求了，否则基本就是看运气约面试了。修改简历的意见：简历页数控制在 2 页以下技术名词注意大小写突出个人亮点，扩充内容。比如在项目中如何找到 Bug，解决 Bug 的过程；比如如何发现的性能问题，如何解决性能问题，最终提升了多少性能；比如为何如此选型，目的是什么，较其他有什么优点等等。总体思路就是不写流水账，突出你在项目中具有不错的解决问题的能力和独立思考的能力。斟酌熟悉、精通等字眼，不要给自己挖坑确保每一个写上去的技术点自己都能说出点什么，杜绝面试官问你一个技术点，你只能答出会用 API 这种减分的情况做到以上内容，然后在投递简历的过程中加上一份求职信，对你的求职之路相信能帮上很多忙。JS 相关谈谈变量提升？当执行 JS 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境。接下来让我们看一个老生常谈的例子，var12345678b() // call bconsole.log(a) // undefinedvar a = 'Hello world'function b() &#123; console.log('call b')&#125; 想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行环境时，会有两个阶段。第一个阶段是创建的阶段，JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。 在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升 123456789b() // call b secondfunction b() &#123; console.log('call b fist')&#125;function b() &#123; console.log('call b second')&#125;var b = 'Hello world' var 会产生很多错误，所以在 ES6中引入了 let。let 不能在声明前使用，但是这并不是常说的 let 不会提升，let 提升了，在第一阶段内存也已经为他开辟好了空间，但是因为这个声明的特性导致了并不能在声明前使用。 bind、call、apply 区别 首先说下前两者的区别。 call 和 apply 都是为了解决改变 this 的指向。作用都是相同的，只是传参的方式不同。 除了第一个参数外，call 可以接收一个参数列表，apply 只接受一个参数数组。 12345678910let a = &#123; value: 1&#125;function getValue(name, age) &#123; console.log(name) console.log(age) console.log(this.value)&#125;getValue.call(a, 'yck', '24')getValue.apply(a, ['yck', '24']) bind 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 bind 实现柯里化。 如何实现一个 bind 函数 对于实现以下几个函数，可以从几个方面思考 不传入第一个参数，那么默认为 window 改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？ 123456789101112131415Function.prototype.myBind = function (context) &#123; if (typeof this !== 'function') &#123; throw new TypeError('Error') &#125; var _this = this var args = [...arguments].slice(1) // 返回一个函数 return function F() &#123; // 因为返回了一个函数，我们可以 new F()，所以需要判断 if (this instanceof F) &#123; return new _this(...args, ...arguments) &#125; return _this.apply(context, args.concat(...arguments)) &#125;&#125; 如何实现一个 call 函数 12345678910111213Function.prototype.myCall = function (context) &#123; var context = context || window // 给 context 添加一个属性 // getValue.call(a, 'yck', '24') =&gt; a.fn = getValue context.fn = this // 将 context 后面的参数取出来 var args = [...arguments].slice(1) // getValue.call(a, 'yck', '24') =&gt; a.fn('yck', '24') var result = context.fn(...args) // 删除 fn delete context.fn return result&#125; 如何实现一个 apply 函数 12345678910111213141516Function.prototype.myApply = function (context) &#123; var context = context || window context.fn = this var result // 需要判断是否存储第二个参数 // 如果存在，就将第二个参数展开 if (arguments[1]) &#123; result = context.fn(...arguments[1]) &#125; else &#123; result = context.fn() &#125; delete context.fn return result&#125; 简单说下原型链？ 每个函数都有 prototype 属性，除了 Function.prototype.bind()，该属性指向原型。 每个对象都有 __proto__ 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 _proto_ 来访问。 对象可以通过 __proto__ 来寻找不属于该对象的属性，__proto__ 将对象连接起来组成了原型链。 如果你想更进一步的了解原型，可以仔细阅读 深度解析原型中的各个难点。 怎么判断对象类型？ 可以通过 Object.prototype.toString.call(xx)。这样我们就可以获得类似 [object Type] 的字符串。 instanceof 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 prototype。 箭头函数的特点 12345678function a() &#123; return () =&gt; &#123; return () =&gt; &#123; console.log(this) &#125; &#125;&#125;console.log(a()()()) 箭头函数其实是没有 this 的，这个函数中的 this 只取决于他外面的第一个不是箭头函数的函数的 this。在这个例子中，因为调用 a 符合前面代码中的第一个情况，所以 this 是 window。并且 this 一旦绑定了上下文，就不会被任何代码改变。 This this 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。 1234567891011121314151617181920function foo() &#123; console.log(this.a)&#125;var a = 1foo()var obj = &#123; a: 2, foo: foo&#125;obj.foo()// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向var c = new foo()c.a = 3console.log(c.a)// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new async、await 优缺点 async 和 await 相比直接使用 Promise 来说，优势在于处理 then 的调用链，能够更清晰准确的写出代码。缺点在于滥用 await 可能会导致性能问题，因为 await 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。 下面来看一个使用 await 的代码。 12345678910var a = 0var b = async () =&gt; &#123; a = a + await 10 console.log('2', a) // -&gt; '2' 10 a = (await 10) + a console.log('3', a) // -&gt; '3' 20&#125;b()a++console.log('1', a) // -&gt; '1' 1 对于以上代码你可能会有疑惑，这里说明下原理 首先函数 b 先执行，在执行到 await 10 之前变量 a 还是 0，因为在 await 内部实现了 generators ，generators 会保留堆栈中东西，所以这时候 a = 0 被保存了下来 因为 await 是异步操作，遇到await就会立即返回一个pending状态的Promise对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 console.log(&#39;1&#39;, a) 这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 a = 10 然后后面就是常规执行代码了 generator 原理 Generator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程 123456789101112// 使用 * 表示这是一个 Generator 函数// 内部可以通过 yield 暂停代码// 通过调用 next 恢复执行function* test() &#123; let a = 1 + 2; yield 2; yield 3;&#125;let b = test();console.log(b.next()); // &gt; &#123; value: 2, done: false &#125;console.log(b.next()); // &gt; &#123; value: 3, done: false &#125;console.log(b.next()); // &gt; &#123; value: undefined, done: true &#125; 从以上代码可以发现，加上 * 的函数执行后拥有了 next 函数，也就是说函数执行后返回了一个对象。每次调用 next 函数可以继续执行被暂停的代码。以下是 Generator 函数的简单实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344// cb 也就是编译过的 test 函数function generator(cb) &#123; return (function() &#123; var object = &#123; next: 0, stop: function() &#123;&#125; &#125;; return &#123; next: function() &#123; var ret = cb(object); if (ret === undefined) return &#123; value: undefined, done: true &#125;; return &#123; value: ret, done: false &#125;; &#125; &#125;; &#125;)();&#125;// 如果你使用 babel 编译后可以发现 test 函数变成了这样function test() &#123; var a; return generator(function(_context) &#123; while (1) &#123; switch ((_context.prev = _context.next)) &#123; // 可以发现通过 yield 将代码分割成几块 // 每次执行 next 函数就执行一块代码 // 并且表明下次需要执行哪块代码 case 0: a = 1 + 2; _context.next = 4; return 2; case 4: _context.next = 6; return 3; // 执行完毕 case 6: case "end": return _context.stop(); &#125; &#125; &#125;);&#125; Promise Promise 是 ES6 新增的语法，解决了回调地狱的问题。 可以把 Promise 看成一个状态机。初始是 pending 状态，可以通过函数 resolve 和 reject ，将状态转变为 resolved 或者 rejected 状态，状态一旦改变就不能再次变化。 then 函数会返回一个 Promise 实例，并且该返回值是一个新的实例而不是之前的实例。因为 Promise 规范规定除了 pending 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 then 调用就失去意义了。 对于 then 来说，本质上可以把它看成是 flatMap 如何实现一个 Promise 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169// 三种状态const PENDING = "pending";const RESOLVED = "resolved";const REJECTED = "rejected";// promise 接收一个函数参数，该函数会立即执行function MyPromise(fn) &#123; let _this = this; _this.currentState = PENDING; _this.value = undefined; // 用于保存 then 中的回调，只有当 promise // 状态为 pending 时才会缓存，并且每个实例至多缓存一个 _this.resolvedCallbacks = []; _this.rejectedCallbacks = []; _this.resolve = function (value) &#123; if (value instanceof MyPromise) &#123; // 如果 value 是个 Promise，递归执行 return value.then(_this.resolve, _this.reject) &#125; setTimeout(() =&gt; &#123; // 异步执行，保证执行顺序 if (_this.currentState === PENDING) &#123; _this.currentState = RESOLVED; _this.value = value; _this.resolvedCallbacks.forEach(cb =&gt; cb()); &#125; &#125;) &#125;; _this.reject = function (reason) &#123; setTimeout(() =&gt; &#123; // 异步执行，保证执行顺序 if (_this.currentState === PENDING) &#123; _this.currentState = REJECTED; _this.value = reason; _this.rejectedCallbacks.forEach(cb =&gt; cb()); &#125; &#125;) &#125; // 用于解决以下问题 // new Promise(() =&gt; throw Error('error)) try &#123; fn(_this.resolve, _this.reject); &#125; catch (e) &#123; _this.reject(e); &#125;&#125;MyPromise.prototype.then = function (onResolved, onRejected) &#123; var self = this; // 规范 2.2.7，then 必须返回一个新的 promise var promise2; // 规范 2.2.onResolved 和 onRejected 都为可选参数 // 如果类型不是函数需要忽略，同时也实现了透传 // Promise.resolve(4).then().then((value) =&gt; console.log(value)) onResolved = typeof onResolved === 'function' ? onResolved : v =&gt; v; onRejected = typeof onRejected === 'function' ? onRejected : r =&gt; throw r; if (self.currentState === RESOLVED) &#123; return (promise2 = new MyPromise(function (resolve, reject) &#123; // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行 // 所以用了 setTimeout 包裹下 setTimeout(function () &#123; try &#123; var x = onResolved(self.value); resolutionProcedure(promise2, x, resolve, reject); &#125; catch (reason) &#123; reject(reason); &#125; &#125;); &#125;)); &#125; if (self.currentState === REJECTED) &#123; return (promise2 = new MyPromise(function (resolve, reject) &#123; setTimeout(function () &#123; // 异步执行onRejected try &#123; var x = onRejected(self.value); resolutionProcedure(promise2, x, resolve, reject); &#125; catch (reason) &#123; reject(reason); &#125; &#125;); &#125;)); &#125; if (self.currentState === PENDING) &#123; return (promise2 = new MyPromise(function (resolve, reject) &#123; self.resolvedCallbacks.push(function () &#123; // 考虑到可能会有报错，所以使用 try/catch 包裹 try &#123; var x = onResolved(self.value); resolutionProcedure(promise2, x, resolve, reject); &#125; catch (r) &#123; reject(r); &#125; &#125;); self.rejectedCallbacks.push(function () &#123; try &#123; var x = onRejected(self.value); resolutionProcedure(promise2, x, resolve, reject); &#125; catch (r) &#123; reject(r); &#125; &#125;); &#125;)); &#125;&#125;;// 规范 2.3function resolutionProcedure(promise2, x, resolve, reject) &#123; // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用 if (promise2 === x) &#123; return reject(new TypeError("Error")); &#125; // 规范 2.3.2 // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行 if (x instanceof MyPromise) &#123; if (x.currentState === PENDING) &#123; x.then(function (value) &#123; // 再次调用该函数是为了确认 x resolve 的 // 参数是什么类型，如果是基本类型就再次 resolve // 把值传给下个 then resolutionProcedure(promise2, value, resolve, reject); &#125;, reject); &#125; else &#123; x.then(resolve, reject); &#125; return; &#125; // 规范 2.3.3.3.3 // reject 或者 resolve 其中一个执行过得话，忽略其他的 let called = false; // 规范 2.3.3，判断 x 是否为对象或者函数 if (x !== null &amp;&amp; (typeof x === "object" || typeof x === "function")) &#123; // 规范 2.3.3.2，如果不能取出 then，就 reject try &#123; // 规范 2.3.3.1 let then = x.then; // 如果 then 是函数，调用 x.then if (typeof then === "function") &#123; // 规范 2.3.3.3 then.call( x, y =&gt; &#123; if (called) return; called = true; // 规范 2.3.3.3.1 resolutionProcedure(promise2, y, resolve, reject); &#125;, e =&gt; &#123; if (called) return; called = true; reject(e); &#125; ); &#125; else &#123; // 规范 2.3.3.4 resolve(x); &#125; &#125; catch (e) &#123; if (called) return; called = true; reject(e); &#125; &#125; else &#123; // 规范 2.3.4，x 为基本类型 resolve(x); &#125;&#125;]]></content>
      <categories>
        <category>面试集</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web Workers 初体验]]></title>
    <url>%2Fweb-workers%2F</url>
    <content type="text"><![CDATA[这个视频有 15+MB 的 BAS 弹幕脚本需要解析，这会导致页面卡死 7 秒左右的时间，期间 UI 被冻结，体验很糟糕，如果使用 Web Workers 进行优化，把解析放入 Web Workers 执行，就可以避免 UI 线程阻塞造成的页面冻结。单线程使用 parse 来模拟解析函数index.js123456function parse (time) &#123; const start = new Date(); while(new Date() - start &lt; time) &#123;&#125; return 'DIYgod'&#125;console.log(parse(1000)); 此时页面会卡死 1s，然后输出一个 ‘DIYgod’。 使用 Web Workersindex.js 12345const wk = new Worker('worker.js');wk.postMessage(1000);wk.addEventListener('message', (e) =&gt; &#123; console.log(e.data);&#125;); worker.js 123456789function parse (time) &#123; const start = new Date(); while(new Date() - start &lt; time) &#123;&#125; return 'DIYgod';&#125;onmessage = function (e) &#123; postMessage(parse(e.data));&#125; 这是 Web Workers 的一个最基础用法，index.js 把 1000 传给 worker.js，worker.js 在后台解析 1000 ms，再把结果 ‘DIYgod’ 传回 index.js，这样解析就不会再占用 js 主线程，避免了页面卡死。 内嵌 Worker上一步我们加载了两个 js 文件，index.js 和 worker.js，在 HTML 里引用 index.js，然后 index.js 会加载 worker.js，那么不想创建单独的 Worker 文件怎么办呢？ index.js 12345678910111213141516const workerBlob = new Blob([`function parse (time) &#123; const start = new Date(); while(new Date() - start &lt; time) &#123;&#125; return 'DIYgod';&#125;onmessage = function (e) &#123; postMessage(parse(e.data));&#125;`], &#123; type: 'application/javascript' &#125;);const workerURL = URL.createObjectURL(workerBlob);const wk = new Worker(workerURL);wk.postMessage(1000);wk.addEventListener('message', (e) =&gt; &#123; console.log(e.data);&#125;); URL.createObjectURL(blob) 会创建一个 DOMString，它包含一个表示 blob 的 URL。 打开控制台的 Network 标签页，你会看到浏览器加载了一个形如 blob:http://example.com/16215a1e-21d4-450c-b441-070e1981b69d 的奇怪链接的 js 文件，这个 js 文件的内容正是我们传给 workerBlob 的字符串内容。 这个 URL 是唯一的，且它的生命周期和创建它的窗口中的 document 绑定，只要页面存在，该网址就会一直有效。 使用 webpack worker-loader上一步中我们把 js 代码放在了字符串里，它不能拆分模块，也不利于后期维护，如果项目正在使用 webpack，安装 worker-loader 可以解决这个问题。 index.js 1234567import WK from 'worker-loader?inline=true&amp;fallback=false!./worker.js';const wk = new WK();wk.postMessage(1000);wk.addEventListener('message', (e) =&gt; &#123; console.log(e.data);&#125;); worker.js 12345import Parse from './parse.js';self.addEventListener('message', (e) =&gt; &#123; self.postMessage(Parse(e.data));&#125;); parse.js 1234567function Parse (time) &#123; const start = new Date(); while(new Date() - start &lt; time) &#123;&#125; return 'DIYgod';&#125;export default Parse; 只需要使用 worker-loader 引用 worker.js 模块，剩下的 worker-loader 会帮我们自动处理，最后编译的结果类似我们上一步的代码。 对比不使用 Web Workers 时： index.js 123import Parse from './parse.js';console.log(Parse(1000)); parse.js（不变） 123456function Parse (time) &#123; const start = new Date(); while(new Date() - start &lt; time) &#123;&#125; return 'DIYgod';&#125;export default Parse; 这样不用修改原有的解析模块，非侵入式，只需要加个 worker.js 中转模块，再改下调用方法即可，维护起来也很方便。 性能如果我把一个计算放入 4 个 Worker，那么这个计算会快 4 倍？ 不，它不仅不会快 4 倍，而且会变得更慢。 Web Workers 不是为了缩短计算时间，而是为了避免 UI 线程冻结。创建线程、线程调度、传输数据等行为会导致计算变得比单线程稍微更慢一点。 我记录了开头那个视频在不同 Worker 数量下解析 100 条弹幕的时间，7 次记录取平均值： Worker 数量 0 1 2 3 4 5 6 10 平均时间(ms) 6085 8216 6310 6388 6483 6317 6475 7233 不使用 Worker 的解析速度最快，1 个 Worker 的速度比其他明显更慢，2 3 4 5 6 个 Worker 速度没有明显差异，但 Worker 数量一直增加速度又会逐渐变慢。 另外又测试了弹幕比较少的视频，结果是 1 2 3 4 5 个 Worker 的速度都差不多。 最后不靠谱地决定使用 2 个 Worker 进行解析。 优化结果妙不可言，不需要等待解析完成才能进行其他操作，也可以一边播放视频一边解析，区别只是播放到没解析好的弹幕不会显示，解析完成才会显示。]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[BAS 高级弹幕]]></title>
    <url>%2Fbas%2F</url>
    <content type="text"><![CDATA[写在前面如果你好奇 B 站的工作有不有趣，或者我来 B 站之后都在做什么，那么这篇文章或许可以解答你的部分疑问。来 B 站后，除了负责 HTML5 播放器的一些模块、重构和日常维护以外，BAS 高级弹幕算是我半年来负责开发的最大一个项目了。本文整理自今天在公司的超极电磁波分享（据说我还是有史以来年龄最小的讲师(=・ω・=)，也算是对这个项目的一个阶段性总结。什么是BAS弹幕BAS，全称 Bilibili Animation Script，是新一代 bilibili 高级弹幕脚本语言，是一种用来描述高级弹幕样式、交互和动画的文本。BAS 弹幕是用 BAS 描述的高级弹幕，由元素和动画组成，元素分为文本对象、交互按钮、path 对象，动画分为简单动画、串联动画、并联动画。BAS 弹幕主要面向字幕君等高端玩家，可以用于字幕、特效、交互应用、游戏、纯弹幕作品等场景。目前 Web 端已经上线，移动端也基本开发完成，期望在明年的活动或拜年祭中能够用到。我们做了几个视频来直观展示 BAS 弹幕：第一个是毛酱大佬做的弹幕 PV：https://www.bilibili.com/video/av257649/第二个是弹幕实现的烂苹果：https://www.bilibili.com/video/av18682336/第三个是交互按钮的演示：https://www.bilibili.com/video/av16558829/index_3.html#page=3 ，另外像哔哩哔哩排行榜周刊这种也是很好的应用场景字幕应用方面可以很容易实现一个字幕文件转 BAS 之类的工具，今后会继续做这样的事情。几种高级弹幕比较mode7弹幕通过界面设置，不需要编写代码，使用简单但功能比较局限。mode8即代码弹幕，功能非常强大但需要编写代码，使用复杂、安全性较差，而且只支持 Flash 平台。mode9即 BAS 弹幕，是 mode 7 和 mode 8 的折中方案。跟 mode 7 相比，mode 9 需要编写脚本，使用稍复杂，但支持交互、图形和更复杂的动画，功能要强大得多。跟 mode 8 相比，mode 9 简化了语法，改用声明式，使用更简单；更安全，播放器解析实现，不合法脚本不会放行，程序可控，而不是直接操作弹幕；可以跨平台。使用 BAS 弹幕发送权限首先权限上对 BAS 弹幕的发送权限有着严格的限制，设计上一般用户需要先用硬币购买，然后等待 UP 主确认之后才可以使用，字幕君等有特殊权限的用户才可以直接使用，但目前只开放给字幕君使用，字幕君使用并完善之后再考虑扩大使用场景。硬币购买UP 主确认一般会员√√UP 主√×VIP×√字幕君/管理员××发送入口注意没有发送权限时入口是隐藏的，这时候可以在试验室中进行尝试。编写脚本下面我们来尝试编写一些简单的脚本，BAS 脚本非常简单，它是一种声明式描述性的脚本，语法易用，保证了对象块和操作块的独立性。尝试 BAS 弹幕最简单的方法是使用文档上的例子和试验室，你可以在浏览器新标签页中打开它，跟着例子尝试一些基础用法。以文本对象为例，一个简单的带渐隐动画的文本对象是这样的：123456def text demo &#123; content = &quot;BAS&quot;&#125;set demo &#123; alpha = 0&#125; 5s 这样我们就成功创建了一条渐隐的 BAS 弹幕，看起来很简单，但是 js 在背后做了大量工作，js 会先把 BAS 脚本解析成 js 可识别的对象，应用上默认属性，再把它渲染到播放器里，同时开始动画，这时候就可以在播放器左上角看到一个渐隐的白色文本。 定位定位也非常简单，BAS 弹幕的定位由弹幕锚点（anchorX anchorY）和舞台位置（x y）共同决定。锚点是弹幕的中心点，(0, 0)为弹幕的左上角，(1, 1)为弹幕的右下角。 1234567891011121314151617181920212223242526272829303132333435def text tl &#123; content = &quot;左上&quot; x = 0 y = 0 anchorX = 0 anchorY = 0&#125;def text tr &#123; content = &quot;右上&quot; x = 100% y = 0 anchorX = 1 anchorY = 0&#125;def text bl &#123; content = &quot;左下&quot; x = 0 y = 100% anchorX = 0 anchorY = 1&#125;def text br &#123; content = &quot;右下&quot; x = 100% y = 100% anchorX = 1 anchorY = 1&#125;def text c &#123; content = &quot;中心&quot; x = 50% y = 50% anchorX = 0.5 anchorY = 0.5&#125; 弹幕舞台弹幕舞台是弹幕的绘制范围，弹幕舞台默认为视频的真实区域，此外文本对象可以通过 parent 属性把其他文本对象指定为父级元素，以父级元素作为舞台进行绘制，父级元素会影响子级元素的定位、缩放等。 123456789101112131415161718192021222324def text a &#123; content = &quot;□&quot; fontSize = 40% x = 0 y = 0 color = 0xffff00&#125;def text b &#123; parent = &quot;a&quot; content = &quot;□&quot; fontSize = 20% x = 0 y = 0 color = 0xff00ff&#125;set a &#123; x = 50% y = 0&#125; 2sthen set a &#123;&#125; 3sset b &#123; y = 50%&#125; 3sthen set b &#123;&#125; 3s 生命周期生命周期是 BAS 的另一个重要概念，生命周期是弹幕存活的时间，没有指定 duration 属性时，元素生命周期为动画总时间，没有动画时默认为4s。生命周期结束后元素就会在舞台中被清除。 123def text a &#123; content = &quot;BAS&quot;&#125; 1234def text a &#123; content = &quot;BAS&quot; duration = 10s&#125; 1234def text a &#123; content = &quot;BAS&quot;&#125;set a &#123;&#125; 10s 自适应位置和字号为百分比值时可以根据舞台大小自适应，可以实现各个平台、不同播放器大小时弹幕的一致性效果，使弹幕在不同情况下相对于视频的位置和大小是固定的，位置坐标为当前舞台宽高 百分比值 px，字号为当前舞台宽度 百分比值 px。 12345678def text c &#123; content = &quot;BAS&quot; x = 50% y = 50% anchorX = 0.5 anchorY = 0.5 fontSize = 5%&#125; 这时候改变播放器大小，弹幕大小也会跟随播放器改变，结果是它相对于视频的位置和大小是固定的。 交互目前只有交互按钮支持一些简单的点击效果，转跳到视频某个时间点、新窗口打开其他视频等。 seek 按钮： 1234567891011def button c &#123; text = &quot;跳转到30分钟&quot; x = 35% y = 45% fontSize = 5% textColor = 0xffffff fillColor = 0x80D8FF target = seek &#123; time = 30m &#125;&#125; av 跳转按钮： 1234567891011121314def button c &#123; text = &quot;av1714157&quot; x = 35% y = 45% fontSize = 5% textColor = 0xffffff fillColor = 0x80D8FF duration = 2s target = av &#123; av = 1714157 page = 1 time = 20.5s500ms &#125;&#125; bangumi 跳转按钮： 1234567891011121314def button c &#123; text = &quot;第22话 春风&quot; x = 35% y = 45% fontSize = 5% textColor = 0xffffff fillColor = 0x80D8FF duration = 2s target = bangumi &#123; seasonId = 1699 episodeId = 80041 time = 1m30s &#125;&#125; 图形可以使用 path 对象绘制 svg 图形，d 属性对应 svg 的路径。 123456789101112def path p &#123; d = &quot;M30.828,30.422 18.997,16.260 Z&quot; viewBox=&quot;0 0 32 34&quot; x = 45% y = 45% scale = 3 borderWidth = 1 borderColor = 0xffffff borderAlpha = 0.8 fillColor = 0x00a1d6 fillAlpha = 0.8&#125; 动画动画分为简单动画、串联动画、并联动画。 弹幕的属性有可渐变、不可渐变、不可变之分，只有可渐变属性才有正常的动画效果，对非渐变属性设置新值会立即生效，对不可变的属性设值将被忽略。原则上某一属性在一个 set 语句中最多只能出现一次，在实现上，如果多次出现，以最后一次为准。 串联动画以先后顺序运行。 123456789def text a &#123; content = &quot;BAS&quot;&#125;set a &#123; color = 0x000000&#125; 1sthen set a &#123; alpha = 0&#125; 1s 并联动画同时进行，并联相同属性时，以最后一次为准，之前冲突的动画会被忽略，由于技术限制，x y rotateX rotateY rotateZ scale 视为相同属性。 123456789def text a &#123; content = &quot;BAS&quot;&#125;set a &#123; color = 0x000000&#125; 1sset a &#123; alpha = 0&#125; 1s BAS 弹幕的前端实现从 BAS 脚本到渲染在浏览器的 DOM 元素主要有以下步骤： 将 BAS 脚本解析成 js 对象（https://github.com/aristotle9/as3cc） 应用默认值、计算百分比值 监控生命周期 解决属性冲突 绘制元素、应用样式和动画 绑定交互事件 定位定位由 BAS 脚本的锚点（anchorX anchorY）和位置（x y）共同决定，实现上使用两个嵌套的 DOM 元素，外部元素定位舞台位置，内部元素定位弹幕锚点，比如一个居中的文本对象： 1234567def text c &#123; content = &quot;BAS&quot; x = 50% y = 50% anchorX = 0.5 anchorY = 0.5&#125; 渲染出的 DOM 结构大概是这样： 123&lt;div style="transform:translate((舞台宽度*50%)px, (舞台高度*50%)px);"&gt; &lt;div style="transform:translate(-50%,-50%);"&gt;BAS弹幕&lt;/div&gt;&lt;/div&gt; 动画动画上考虑到浏览器兼容性和易用性，CSS3 的 animation 是最佳的选择，其中涉及属性有： 属性 描述 @keyframes 定义动画 animation-name 对应 @keyframes 动画的名称 animation-duration 动画完成一个周期的时间 animation-play-state 动画运行或者暂停 animation-timing-function 动画的速度曲线 简单动画沿用上面的例子： 123456def text demo &#123; content = &quot;BAS&quot;&#125;set demo &#123; alpha = 0&#125; 5s 这样一条 BAS 脚本渲染出的 DOM 结构大概是这样： 12345&lt;style&gt;@keyframes a1 &#123; 100% &#123; opacity:0; &#125;&#125;&lt;/style&gt;&lt;div style="animation-name:a1;animation-duration:5s;opacity:1;"&gt;BAS&lt;/div&gt; keyframes 定义动画关键帧，动画结束时透明度为零；animation-duration 对应动画的时间 5s。 并联动画定义多个keyframes实现多个动画同时运行。 123456789def text a &#123; content = &quot;BAS&quot;&#125;set a &#123; color = 0x000000&#125; 1sset a &#123; alpha = 0&#125; 1s 123456789&lt;style&gt;@keyframes a1 &#123; 100% &#123; color:#000000; &#125;&#125;@keyframes a2 &#123; 100% &#123; opacity:0; &#125;&#125;&lt;/style&gt;&lt;div style="animation-name:a1,a2;animation-duration:1s,1s;opacity:1;color:#ffffff;"&gt;BAS&lt;/div&gt; 串联动画使用 animation-delay 错开不同动画开始的时间，实现串联的效果。 123456789def text a &#123; content = &quot;BAS&quot;&#125;set a &#123; color = 0x000000&#125; 1sthen set a &#123; alpha = 0&#125; 1s 12345678910&lt;style&gt;@keyframes a1 &#123; 100% &#123; color:#000000; &#125;&#125;@keyframes a2 &#123; 0% &#123; color:#000000; &#125; 100% &#123; color:#000000;opacity:0; &#125;&#125;&lt;/style&gt;&lt;div style="animation-name:a1,a2;animation-duration:1s,1s;animation-delay:0s,1s;opacity:1;color:#ffffff;"&gt;BAS&lt;/div&gt; 状态控制开始animation-play-state: running 暂停animation-play-state: paused 中间状态设置 animation-delay 为负值就可以实现从某个中间状态开始动画。 比如弹幕的生命周期对应视频的 1s 到 5s，视频跳转到 4s 时，需要设置弹幕 animation-delay 属性为 -1s。 结束生命周期结束需要及时清除元素，原理是 animation 动画结束会触发 animationend 事件，该事件触发时清除掉元素即可。元素没有动画时需要指定一个空动画。 12345&lt;style&gt;@keyframes a1 &#123; 100% &#123; &#125;&#125;&lt;/style&gt; End.]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我喜欢的音乐]]></title>
    <url>%2Fmy-favorite-songs%2F</url>
    <content type="text"><![CDATA[$(function(){$.ajax({url:"https://api.i-meto.com/meting/api?server=netease&type=playlist&id=35798529",success:function(e){var a=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",listmaxheight:"280px",mode:"random",music:JSON.parse(e)});window.aplayers||(window.aplayers=[]),window.aplayers.push(a)}})})&nbsp;听了几年网易云音乐积累的音乐，女声、日语为主（也可能会有一些奇奇怪怪的歌曲)]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[寂静之城 (The Silence City)]]></title>
    <url>%2F1666%2F</url>
    <content type="text"><![CDATA[马伯庸《寂静之城》未删节版本全文发表在 2005 年第 5 期《科幻世界》上的本文由于众所周知的原因进行了删节,这是发在马伯庸 个人网站上的原文And in the naked light I saw ten thousand people, maybe more.People talking without speaking, people hearing without listening.People writing songs that voices never shared, no one dared disturb the sound of silence.— The sound of silence美利坚合众国,2015 年,纽约。当电话响起来的时候,阿瓦登正趴在电脑前面睡觉。电话铃声十分急促,尖锐,每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛十分不情愿地爬起来,觉得脑子沉滞无比。其实他的脑子一直就很沉滞,这种感受既然是生理上的也是心理上的。他身处的房间很狭窄,空气不很好,唯一的两扇窗户紧闭着——即使打开窗户也 没用,外面的空气更加浑浊。这是一间大约只有三十平米的小屋子,屋子墙壁上泛黄的墙纸有好几处开始剥落,天花板上的水渍渗成奇怪的形状;一张老式的军绿色 行军床摆在墙角,床腿用白漆写着编号;紧挨着行军床的是一张三合板制成的电脑桌,桌上摆着一台浅白色的电脑,机箱后面五颜六色的电线纠缠在一起,把它们自己打成一个古怪的死结,杂乱无章地蔓延到地板与墙角,仿佛常春藤一样。阿瓦登走到电话前,慢慢坐到地板上,目光呆滞地盯着电话,手却没有动。这部古怪的东西是老式的按键式电话,大概是十几年前的款式,这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的;他拿回家以后稍微修理了一下,发现居然还能用,这让他当时小小地兴奋了一阵子。电话继续在响着,已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰,用两个指头拈起电话,慢慢把电话放到耳边。“请说出你的网络编号?”话筒里传来的声音并不急噪,事实上它也不带其他任何的感情色彩,因为这是电脑合成的人工智能语音系统。“19842015”阿瓦登熟练地报出一连串数字,同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音,他有时候想,假如打过电话来的一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想,不过这幻想会让他的身体得到几秒钟的舒缓。话筒里的声音仍旧在继续着。“关于你在十月四日提交的网络论坛用户注册申请已经被受理,经有关部门审查后确认资格无误,请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续,并领取用户名及密码。”“知道了,谢谢。”阿瓦登谨慎地选择词语,同时努力挤出一副满足的微笑,好象话筒的另一侧有人在看着自己一样。放下电话,阿瓦登先是茫然地盯着它了大约两分钟,然后站起来活动一下手腕,坐回到电脑前面,缓慢地推动了一下鼠标。电脑屏幕“啪”地一声亮了起来,显示出一个登陆的界面,还有一行英文:“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去,又输入了自己的名字,点击“登陆”。随即机箱的指示灯开始频繁地闪动起来,整个机器发出细微的噪音。每一个使用互联网的人都有一个网络编号,没有这个编号,就无法连接进互联网络。每一个编号都是独一无二的,每个人只有一个;这是使用者在网上的唯一代号,既不能修改,也不能取消。这些编号分别对应着使用者身份证上的名字,因此 19842015 就是阿瓦登,阿瓦登就是 19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面,那看起来颇为滑稽,也容易引发一些不正当的联想。有关部门说使用网络实名制是为了规范网络秩序方便管理,杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会 是什么,他自己没试过用假名上网,他所认识的任何人里也不曾有人尝试过——事实上,从技术角度来说,他根本没办法匿名登陆互联网络,没有编号就没有权限上网,而编号则连接着他的详细档案,换句话说,没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。“有关部门”,这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指,又是确指,其所涵盖的意义相当广泛。有时候,它指的是为阿瓦登颁 发网络编号的美国联邦网络管理委员会;有时候它是将最新通告及法规发到阿瓦登 EMAIL 信箱的服务器;还有时候它是监察网络的 FBI 特属网络调查科;总之一句话,有关部门是无处不在,无职不司的,总会在适当的时候出现,给予指导、监控或者警告,无论你是在网上还是网下。简直就象是老大哥一样无微不至。电脑仍旧在持续运转着,阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的,具体型号和配置阿瓦登并不清楚,机箱是被焊死的,无法打开。于是他拿出一小瓶清凉油,用右手小拇指的指甲挑出一点抹在自己的太阳穴,然后从脚下堆积如山的杂物里翻出一个塑料杯子,从桌子旁的饮水机里接了半杯蒸 馏水,就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里,空泛的味道让他有些恶心。音响里忽然传来一阵美国国歌的旋律,阿瓦登放下杯子,重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告,白底黑色四号字,里面陈述了使用互联网的意义以及最新的规章制度。“缔造健康的互联网络,美国万岁!”音响里传来激昂的男性呼声,阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络,美国万岁!”这段呼号持续了三十秒钟,然后消失,取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开,上面开列出几个选项:工作、娱乐、电子信箱和BBS 论坛。其中 BBS 选项呈现灰色,说明这项功能还没有开通。整个操作系统简洁明了,这台电脑的浏览器没有地址输入栏,只是在收藏夹里有几个无法修改的的网站地址。理由很简单,这些网站都是健康向上的, 假如其他站点和这些网站一样,那么只保留这些网站就够了;假如其他站点与这些网站不一样,那么就是不健康的,是低级趣味,不能保留。这是有关部门精心设计的,是为了公民的精神健康着想,生怕他们受到不良信息的侵染。阿瓦登首先点开了“工作”,一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员,他每天的工作就是根据上级的要求编写程序。这份工作很无聊,不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去,上级也从来没有跟他说过。他打算继续昨天的工作,但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁,无法集中精神,大脑还是很呆滞,胸口仍旧发闷。他试图娱乐自己,但是他发现“娱乐”选项里只有纸牌与挖地雷,根据有关部门的说法,这是两个健康的游戏,没有暴力,没有色情,不会让人产生犯罪冲动,也不涉及任何政治色彩。据说美国境外也是有互联网络站点的,不过无法连上去,因为本国的互联网络自成格局,独立自主,普通人无法直接连接到国外——IE 浏览器没 有地址栏,就算知道地址也没有用处。“您有一封新邮件。”系统忽然跳出来提示,阿瓦登终于找到了可以暂停工作的理由,他很快移动鼠标到电子信箱的选项上,点开,很快一个新的界面出现了。“To: 19842015From:10045687Subject: 模块、已经、完成、当前、项目、是否、开始。”阿瓦登微微地叹了一口气,觉得有些失望。每一次他收到新的电子邮件,都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经,每一次他都失望 了。其实他早就知道这一点,只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望,阿瓦登觉得自己迟早会疯掉的。这封信很简短,但是内容很充实。19842015 是阿瓦登的网络编号,而 10045687 则是他的一位同事的编号,这种工作性质的信件通常都 以编号相称。信的内容是几个不连续的英文单词,这是有关部门所提倡的一种电子邮件书写方式,因为这样可以方便软件检查信件中是否含有敏感词汇。阿瓦登打开回信的页面,同时另开了一个窗口,打开一份名字叫做“网络健康语言词汇列表”的 TXT 文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候,都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现 网民使用了列表以外的词,那么这个词就会被自动屏蔽,取而代之的是“请使用健康语言”。“屏蔽”是个专有名词,被屏蔽的词将不允许再度被使用,无论是在书信里还是口头都不允许。讽刺的是,“屏蔽”一词本身也是被屏蔽的词汇之一。这个列表是经常更新的,每一次更新都会有几个词在列表上消失,于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前,“运动”这个词是可以使用的,但后来有关部门宣布这也是一个敏感词汇,阿瓦登只好使用“质点位移”来表达相同的意思。他对照着这份列表,很快就完成了一封文字风格与来信差不多的 EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思,而且要尽量减少不必要的修辞,所以这些信件就好象是那杯蒸馏水一样,淡而无味,阿瓦登有时候想,他早晚也会和这些水和信一样腐烂,因为这些信是他写的,水是他喝的。接下来阿瓦登启动检查软件先扫了一遍,确保自己没无意中加入什么敏感词汇。等这一切都完成后,他按下了发送键,邮件被送出去了。阿瓦登没有留下备份,因为他的机器里没有硬盘,也没有软驱、光驱或者 USB 接口。这个时代宽带技术已经得到了很大发展,应用软件可以集中在统一的一个服务器中,个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘,也不需要本地存储,他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中,这样便于管理。换句话说,阿瓦登所使用的电脑,仅仅具备输入和输出两种功能。完成了这封信后,阿瓦登再度陷入了软绵绵的焦躁状态,这是一个连续工作了三天的程序员的正常反应。这种情绪很危险,因为它让人效率低下精神低迷,而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇,如果他写信给别人抱怨的话,那么对方收到的将会是一封写满“请使用健康语言” 的 EMAIL。这就是阿瓦登每天的生活,今天比昨天更糟糕,但应该比明天还稍微好一点。事实上这个叙述也很模糊,因为阿瓦登自己并不清楚什么是“好一点”,什么是“更糟糕”。“好”与“坏”是两个变量,而他的生活就是一个定量,只有一个常数叫“压抑”。阿瓦登推开鼠标,把脑袋向后仰去,长长地呼了一口气。(至少“呼”这个字还没有被屏蔽)这是空虚的表现,他想哼些歌,但却又不记得什么,转而吹了几下口哨,但那听起来与一只生了肺结核的狗差不多,只得做罢。有关部门象幽灵一样充斥在整个房间里,让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎,刚一张口就被灌入泥水,甚至无法大声呼救。他的头不安分地转了几转,眼神偶尔撇到了摆在地板上的老式电话机,他忽然想到还必须要去有关部门申请自己的 BBS 论坛浏览许可证。于是他关掉 “工作”和“电子邮件”窗口,退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫,他很高兴能够暂时摆脱互联网络,在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。阿瓦登找出一件破旧的黑色呢子大衣,那件大衣继承自他的父亲,袖口和领子已经磨损的很严重,个别地方有灰色的棉花露出来,但还是很耐寒。他把大衣套到身上,戴上一副墨绿色的护镜,用过滤口罩捂住嘴。他犹豫了一下,拿起“旁听者”别在耳朵上,然后走出家门去。纽约的街上人很少,在这个时代,互联网的普及率相当地高,大部分事务在网上就可以解决,有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触,而两个人发生物理接触后会发生什么事则很难控制。“旁听者”就是为了防止这种事而发生的,这是一种便携式的语言过滤器,当携带者说出敏感词汇的时候,它就会自动发出警报。每一位公民外出前都必须要携带这个装置,以便随时检讨自己的言语。当人们意识到旁听者存在的时候,他们往往会选择沉默,至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来,一起“健康”。这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的 电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓 缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起 来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不 无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：“烟，有吗？”男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：“没有。”男人很失望，又一次不甘心地张开嘴。“酒，有吗？”“没有。”阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老子够了……”男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。“他，是，你朋友？”“我，不，认识。”警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。 街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。BBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。“公民，请您站在原地不要动。”一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。“缔造健康的互联网络，美国万岁。”阿瓦登跟着声音重复了一遍。“请前往八号窗口。”电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。“请把文件放入盒子里。”柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。“请把文件放入盒子里。”声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。 很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。“你申请BBS服务的目的是什么？”喇叭后的女声浸满了纯粹事务性的腔调。“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。“最后手续确认，你已经获得BBS论坛浏览权。”“谢谢。”“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。“手续办理完毕，请离开网络部回到自己的工作岗位上。”甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：title题目？这是什么意思？阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话： “每周日辛普森大楼5层B户。”又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。营造健康的互联网络。FUXKYOU, YOUSONOFBITCH。阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。阿瓦登深深吸了一口气，伸手去按电纽。电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：“你，找谁？”女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历， 但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：“欢迎加入说话会！”“说话会？”出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”“你们，是什么，人，这，是，哪里？”阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：“可以问个问题吗？说话会到底是什么？”带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。“可是，要说些什么呢？”阿瓦登又问道。“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。“我不会离开的，我要加入你们，说话。”“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”“假名？”“是的，和我户籍本上的名字是不同的。”“可是，为什么？”“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。“真的什么都可以？”“什么都可以，在这里没有任何限制。”阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。“你是第二个找到说话会的人，第一个是杜拉丝小姐。”阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。“王二，你可曾看过《1984》？”阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”“这是一本书的名字。”“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”“太好了，然后她写下来了，对吗？”“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。“很不错的比喻，王二，就是如此，真不愧是程序员。”谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。“活动？还有什么活动？”阿瓦登奇怪地问道，说话会除了说话还有其他活动？“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”“完全交流？”“就是intercourse”“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体…………当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。“很舒服，对不对？”她问道。“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。“谢谢你。”阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”“我记住了。”阿瓦登回答，然后转身要走。“王二。”阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。“FUXKYOU, YOUSONOFBITCH！”每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。有什么地方不对劲！他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[可能是目前最好用的两个 Hexo 播放器插件]]></title>
    <url>%2Fbest-players-in-hexo%2F</url>
    <content type="text"><![CDATA[我实在也不是谦虚，这可能是目前最好用的两个 Hexo 播放器插件，感谢插件作者（给大佬们递女装本文只作为演示，使用方法和 issue 请移步 GitHubhexo-tag-aplayer1npm install hexo-tag-aplayer --save Hexo 的 APlayer 标签插件，由 @grzhan 维护 $(function(){var e=new APlayer({element:document.getElementById("aplayer1"),showlrc:3,theme:"#ad7a86",music:[{title:"あっちゅ～ま青春!",author:"七森中☆ごらく部",url:"https://dplayer.b0.upaiyun.com/yuruyuri.mp3",pic:"https://dplayer.b0.upaiyun.com/yuruyuri.jpg",lrc:"https://dplayer.b0.upaiyun.com/yuruyuri.lrc"},{title:"secret base~君がくれたもの~",author:"茅野愛衣",url:"https://dplayer.b0.upaiyun.com/secretbase.mp3",pic:"https://dplayer.b0.upaiyun.com/secretbase.jpg",lrc:"https://dplayer.b0.upaiyun.com/secretbase.lrc"},{title:"回レ！雪月花",author:"小倉唯",url:"https://dplayer.b0.upaiyun.com/snowmoonflowers.mp3",pic:"https://dplayer.b0.upaiyun.com/snowmoonflowers.jpg",lrc:"https://dplayer.b0.upaiyun.com/snowmoonflowers.lrc"}]});window.aplayers||(window.aplayers=[]),window.aplayers.push(e)}) &nbsp; hexo-tag-dplayer1npm install hexo-tag-dplayer --save Hexo 的 DPlayer 标签插件，由 @Myer921 @dixyes 维护 $(function(){var a=new DPlayer({container:document.getElementById("dplayer1"),video:{url:"https://dplayer.b0.upaiyun.com/hikarunara.mp4",pic:"https://dplayer.b0.upaiyun.com/hikarunara.png",thumbnails:"https://dplayer.b0.upaiyun.com/hikarunara_thumbnails.jpg"},danmaku:{id:"diygodme1",api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(a)})]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[慢慢的 就没有了 就像从未存在过]]></title>
    <url>%2F1655%2F</url>
    <content type="text"><![CDATA[一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。天黑了，那么睡觉吧，但愿长醉不复醒，卧槽泥马勒戈壁。最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。版权声明：转载自 《慢慢的 就没有了 就像从未存在过》作者: 小海几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的 “根据相关法律法规，相关搜索结果不予显示 ”。时间长了，你想，反正知道了也没什么用，不如不看了。慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为 “报备问题 ”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。天黑了，那么睡觉吧，但愿长醉不复醒，卧槽泥马勒戈壁。最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[做了一点微小的改动]]></title>
    <url>%2Fnew-blog%2F</url>
    <content type="text"><![CDATA[新的开始，一点微小的改动博客程序从 WordPress 换到了 HexoHexo 是基于 Node.js 的静态博客框架，作为一名不会 php 的弱鸡前端，还是 Hexo 用起来更方便现在博客托管在 GitHub，不用再自己维护服务器了主题样式基本保持了一致基于 Next 重构了之前使用的 WordPress 主题，取名 Sagiri，我的主题跟纱雾一样可爱除了更可爱，又在原主题基础上加了使用 Webpack 打包 js 的改进和 pjax 的处理主题虽然开源了，但是属于自用性质的项目，很多应该做成可定制化的地方都没有做，从开源项目的视角来看做得并不好，而我目前又对制作主题并没有太高的兴致，所以使用之前还请慎重考虑博客名博客名称 JRucker]]></content>
      <categories>
        <category>事件簿</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[APlayer - 送给小狐狸和小兔子的 HTML5 播放器]]></title>
    <url>%2F2167%2F</url>
    <content type="text"><![CDATA[小狐狸和小兔子是很好很好的朋友。一起散步的时候,不巧遇到了猎人。他们转身就跑,都希望猎人更容易发现自己。小狐狸跑进了蒲公英群，白色的蒲公英漫天飞起。小兔子逃进玫瑰花园，红色的玫瑰花瓣散落一地。从此失散在彼此的世界里。幸运的是，后来，小狐狸遇到了小王子，小兔子遇见了爱丽丝。&nbsp;GitHub项目主页（喜欢就给个star吧~）：https://github.com/DIYgod/APlayerDemo：https://www.anotherhome.net/file/APlayer/GitHub Trending（热门榜）第8位截图留念2333：]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTML5的Page Visibility API]]></title>
    <url>%2F2153%2F</url>
    <content type="text"><![CDATA[离开和进入页面时改变title目前页面可见性API有两个属性，一个事件，如下：document.hidden: Boolean值，表示当前页面可见还是不可见document.visibilityState: 返回当前页面的可见状态，取值有 hidden visible prerender previewvisibilitychange: 当可见状态改变时候触发的事件以前只知道可以通过 iframe + onblur/onfocus事件 来检测页面可见性，有了这个 API 真是方便优雅了很多啊代码：1234567891011121314var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function() &#123; if (document.hidden) &#123; document.title = '我藏好了哦~ ' + OriginTitile; clearTimeout(titleTime); &#125; else &#123; document.title = '被你发现啦~ ' + OriginTitile; titleTime = setTimeout(function() &#123; document.title = OriginTitile; &#125;, 2000); &#125;&#125;);]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[论 IFTTT 的正确食用姿势]]></title>
    <url>%2F2125%2F</url>
    <content type="text"><![CDATA[什么是IFTTT官网：https://ifttt.com这是一个2011年在美国上线的网站，IFTTT 是 If This Then That 的缩写。通俗的来讲，IFTTT 的作用就是如果触发了一件事，则执行设定好的另一件事。结合上图，Recipes 的目的是打通 「this」 和 「that」 两个网络服务，网络服务在这里称为 Channels (频道)，前者称为 Trigger Channel (触发器频道)，后者称为 Action Channel (动作频道)，当触发器频道满足触发条件，那么就会执行动作频道指定的动作。所以，IFTTT 创建一个「Recipes 流程」的流程如下：选择一个触发器频道，设置它的触发条件，再选择一个动作频道，然后设置它要执行的动作，OK，这样就搞定了。比如我设置了这样一个Recipes：整个Recipe的意思是 “If new feed item from https://www.anotherhome.net/feed, then publish a post to @DIYgod酱”。这样等我这篇文章发布之后，一条微博就会自动发送了。然而还没完，我还有两个涉及微博的 Recipes：不出意外的话我的 Facebook 和 Twitter 马上都会出现这篇文章的推送。IFTTT可以做什么目前 IFTTT 所支持的 Channels 也算比较丰富了，如 Feed (RSS)、GitHub、微博、印象笔记、Dropbox、邮件、SMS、Gmail、Instagram、Pocket、WordPress、OneDrive、OneNote、Twitter、Facebook、天气预报等等，总数多达230多个。它们之中大多数既可以当触发器，也能作为动作来使用的。这里要吐槽一下，230 多个频道里只有一个中国应用，新浪微博，可想国内应用有多么小气，“诶，我干嘛要提供接口哇，你把你的服务接到我的平台里就好了”，诺，大家都是这么想的。另外得益于发布的 Android 版以及 iOS 版的客户端，现在 IFTTT 的频道里不仅仅是一些互联网服务了，它还新增了诸如等手机的联系人、照片、短信、地理位置、通知推送等「频道」，这让 IFTTT 变得更加的实用。IFTTT的有趣玩法这是一个很酷且具有高自由度的服务，你可以利用它做很多很多有趣的事情。而且虽然国内很多服务没有开放API，但我们可以用 RSS 让很多事情变成可能。明天下雨/下雪/低于0摄氏度/高于35摄氏度，给我发一条iOS系统通知如果在Facebook上标记、在Instagram上点了“喜欢”一张照片，则保存到Dropbox相应文件夹如果有人给我发了一封带附件的Gmail，则把附件保存在DropboxYouTube上喜欢了一个视频，则分享到Facebook、 Twitter上并且保存链接到印象笔记把手机截图图片自动归类到“截图”相册中每当添加一张照片时，把照片上传到Dropbox当添加一个Google Calendar 事件时，添加一个同样的iPhone 日历事件每天晚上提醒我睡觉&nbsp;另外IFTTT 网站上也有很多网友分享出来的 Recipes 可以供你参考或直接使用。扩展阅读IFTTT - 热门问答 - 知乎触发你的智能生活：IFTTT 入门 - 少数派iFTTT 入门介绍与简单使用设置教程 - 让互联网服务更加智能自动化地为你工作！ | 异次元软件下载你不知道这个叫IFTTT的东西到底有多好玩]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DPlayer – 最好看的弹幕播放器送给最好看的宫园薰]]></title>
    <url>%2F2648%2F</url>
    <content type="text"><![CDATA[最好看的HTML5弹幕播放器送给最好看的宫园薰。DPlayer来源于我的毕业设计，DPlayer发布后，我的学生生涯也随之结束。&nbsp;Q：当初为什么要做一个这么好看的弹幕播放器？A：毕业设计选到的题目。&nbsp;Q：5月底就在GitHub发布了，为什么直到现在（8月底）才发博客？A：刚开始觉得DPlayer还不太完善，不适合用在生产环境，就没写博客。&nbsp;Q：所以是又经过了3个月的完善才在博客正式发布的么？A：不是，主要是因为我买了守望先锋…&nbsp;Q：我也很好看，为什么不送给我？A：可以，那同时送给爱我的70亿人类吧。&nbsp;GitHub：https://github.com/DIYgod/DPlayerDemo：http://dplayer.js.org&nbsp;Q：还有什么想说的么？A：差点忘了最重要的事情：我的战网ID DIYgod#5922，加我一起屁股开黑呀！function myDPlayer(){var e=new DPlayer({element:document.getElementById("dplayer1"),autoplay:!1,theme:"#FADFA3",loop:!0,screenshot:!1,preload:"none",video:{url:"https://dplayer.b0.upaiyun.com/若能绽放光芒.mp4",pic:"https://dplayer.b0.upaiyun.com/若能绽放光芒.png"},danmaku:{id:"9E2E3368B56CDBB4",api:"https://api.prprpr.me/dplayer/",token:"tokendemo",maximum:3e3}});window.dplayerInstances=[e]}window.DPlayer?myDPlayer():$.getScript("https://cdn.bootcss.com/hls.js/0.8.7/hls.min.js",function(){$.getScript("https://cdn.bootcss.com/dplayer/1.16.0/DPlayer.min.js",function(){myDPlayer()})})]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《JavaScript高级程序设计》读书笔记]]></title>
    <url>%2F2073%2F</url>
    <content type="text"><![CDATA[莎士比亚曾经说过：“好记性不如烂笔头。”第一章 JavaScript简介1.1 JavaScript简史1.2 JavaScript实现一个完整的JavaScript实现应该由三个不同的部分组成：核心（ECMAScript）、文档对象模型（DOM）、浏览器对象模型（BOM）。ECMAScript：提供核心语言功能；DOM：提供访问和操作网页内容的方法和接口；BOM：提供与浏览器交互的方法和接口。1.3 JavaScript版本&nbsp;第二章 在HTML中使用JavaScript2.1 script元素标签的位置：为了避免浏览器在呈现页面时出现明显的延迟，现代Web应用程序一般都把全部JavaScript引用放在&lt;body&gt;元素中页面内容的后面。延迟脚本：defer属性表明脚本在执行时不会影响页面的构造，脚本会被延迟到整个页面都解析完毕后再运行；只适用于外部脚本文件。1&lt;script defer="defer" src="example.js"&gt;&lt;/script&gt; 异步脚本：async属性表示当前脚本不必等待其他脚本，也不必阻塞文档呈现，告诉浏览器立即下载文件，且并不保证标记为async的脚本按照他们的先后顺序执行；只适用于外部脚本文件。 12&lt;script async src="example1.js"&gt;&lt;/script&gt;&lt;script async src="example2.js"&gt;&lt;/script&gt; 2.2 嵌入代码与外部文件2.3 文档模式 混杂模式与标准模式；开启标准模式： 12&lt;!-- HTML 5 --&gt;&lt;!DOCTYPE html&gt; 2.4 noscript元素&nbsp; 第三章 基本概念3.1 语法 区分大小写：ECMAScript中的一切都区分大小写。 严格模式：在严格模式下，ECMAScript 3 中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。在顶部添加如下代码： 1"use strict" 3.2 关键字和保留字3.3 变量 给未经声明的变量赋值在严格模式下会导致抛出 ReferenceError 错误。 3.4 数据类型 typeof操作符，用来检测变量的数据类型。 5种简单数据类型：Undefined、Null、Boolean、Number、String；1种复杂数据类型（引用类型）：Object。 Undefined类型：使用var声明变量但未对其加以初始化时，这个变量的值就是undefined。 Null类型：null值表示一个空对象指针；只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值。 Boolean类型：其他类型转换为Boolean类型，使用函数Boolean()。 Number类型：其他类型转换为Number类型，常用函数parseInt()，转换字符串时，如果第一个字符不是数字字符或者负号，会返回NaN，第二个参数可选，表示进制 String类型：字符串是不可变的；其他类型转换为String类型，使用函数toString()或String()或加一个空字符串（1+’’）。 Object类型 创建对象的方法： 1var o = new Object(); 创建Object对象的实例并为其添加属性或方法，就可以创建自定义对象； Object类型是所有它的实例的基础，具有下列属性和方法： constructor：保留着用于创建当前对象的函数即构造函数； hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中是否存在； isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型； propertyIsEnumerable()；toLocaleString()； toString()：返回对象的字符串表示； valueOf()：返回对象的字符串、数值或布尔值表示； 3.5 操作符 在比较字符串时，实际比较的是两个字符串中对应位置的每个字符的字符编码值。 1"23" &lt; "3" // true 在比较数值和字符串时，字符串都会被被转换成数值，然后再以数值方式与另一个数值比较；如果不能转换成数值，就转换成NaN。 任何操作数与NaN进行比较，结果都是false。 1234NaN == NaN // falseNaN === NaN // falseNaN &amp;gt; NaN // falseNaN &amp;lt; NaN // false 相等（==） 全等（===）：全等只在两个操作数未经转换就相等的情况下返回true。 12"55" == 55 // true"55" === 55 // false 条件操作符 1variable = boolean_expression ? true_value : false_value; 3.6 语句 由于ECMAScript中不存在块级作用域，因此在循环内部定义的变量也可以在外部访问到： 1234for (var i = 0; i &amp;lt; 10; i++) &#123; var j = 1;&#125;console.log(i, j); // 10 1 for-in 语句可以用来枚举对象的属性。 123for (property in expression) &#123; ...&#125; break 和 continue 语句与 label 语句联合使用：多发生在循环嵌套的情况下。 12345678910111213var num = 0;outermost:for (var i = 0; i &amp;lt; 10; i++) &#123; for (var j = 0; j &amp;lt; 10; j++) &#123; if (i == 5 &amp;amp;&amp;amp; j ==5) &#123; break outermost; &#125; num++; &#125;&#125;console.log(num); // 55 3.7 函数 函数参数：参数在内部是用一个数组来表示的，函数接收到的始终都是这个数组，而不关心数组中包含哪些函数；通过arguments对象来访问这个参数数组；命名的参数只提供便利，但不是必需的；arguments对象中的值与对应的命名参数的内存空间是独立的，但它们的值会同步。 1234567891011function example(name, age) &#123; console.log('arguments:', arguments); console.log('name:', name, 'age:', age); name = 'DIYgod'; console.log(arguments[0]);&#125;example('Anotherhome', '556', 'www.anotherhome.net');// arguments: ["Anotherhome", "556", "www.anotherhome.net"]// name: Anotherhome age: 556// DIYgod &nbsp; 第四章 变量、作用域和内存问题4.1 基本类型和引用类型的值 在操作对象时，实际上是在操作对象的引用而不是实际的对象。 2.从一个变量向另一个变量复制基本类型的值时，会创建这个值的一个副本；从一个变量向另一个变量复制引用类型的值时，复制的是指向存储在堆中的一个对象的指针，复制之后两个变量指向同一个对象。 123456789var o1 = &#123;&#125;;var o2 = o1;o1.name = 'DIYgod';console.log(o2.name); // DIYgodvar n1 = 1;var n2 = n1;n1 = 2;console.log(n2); // 1 传递参数：参数只能按值传递，参数为对象时，在函数内部访问的是同一个对象。 123456789function setName(o) &#123; o.name = 'DIYgod'; o = &#123;&#125;; o.name = 'Anotherhome';&#125;var p = &#123;&#125;;setName(p);console.log(p.name); // DIYgod 确定一个值是哪种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符。 4.2 执行环境及作用域 执行环境有全局执行环境和函数执行环境之分；每个执行环境都有一个与之关联的变量对象；每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链，作用链的前端是当前执行的代码所在的变量环境，最后一个对象是全局执行环境的变量对象。 查询标识符：从作用域链的前端开始，向上逐级查询，找到后搜索结果停止，没有找到则一直追溯到全局环境的变量对象。 4.3 垃圾回收 最常用的垃圾搜集方式是标记清除：垃圾回收器在运行时会给存储在内存中的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记，而在此之后还有标记的变量被视为准备删除的变量，因为这些变量无法被访问到了。 优化内存占用：为执行中的代码只保存必要的数据；一旦数据不再有用，最好通过将其值设置为null来释放其引用——解除引用；解除引用的作用是让其值脱离执行环境，以便垃圾搜集器下次运行时将其回收。 &nbsp; 第五章 引用类型5.1 Object类型 创建Object实例：使用Object构造函数；对象字面量。 12345678910// new 操作符法var o1 = new Object();o1.name = 'DIYgod';o1.age = 20;// 对象字面量表示法var o1 = &#123; name: 'DIYgod', age: 20&#125; 访问对象属性：点表示法；方括号表示法。建议使用点表示法。 12345678910// 点表示法console.log(o.name);// 方括号表示法console.log(o['name']);var n = 'name';console.log(o[n]);console.log(o['first name']; 5.2 Array类型 创建数组：使用Array构造函数；使用数组字面量表示法。 123456var a1 = new Array();var a2 = new Array(20);var a3 = new Array('red', 'blue', 'green');var a4 = [];var a5 = ['red', 'blue', 'green']; 利用length在末尾添加新项。 12var a = ['a', 'b'];a[a.length] = 'c'; 检测数组：Array.isArray()（解决了存在两个以上全局执行环境时instanceof检测结果出错的情况）。 栈方法和队列方法：push()添加一项到数组末尾；pop()移除数组末尾一项；shift()移除数组第一项；unshift()；添加一项到数组前端。 重排序 reverse()：反转数组项的顺序。 sort()：默认将数组项转换成字符串然后升序排列。可以接收一个比较函数作为参数。 比较函数接收两个参数，如果第一个参数位于第二个参数之前则返回一个负数，相等则返回0，第二个参数位于第一个参数之前则返回一个负数。 123456789var a = [0, 1, 15, 10, 5];a.sort();console.log(a) // [0, 1, 10, 15, 5]function compare(value1, value2) &#123; return value1 - value2;&#125;a.sort(compare);console.log(a) // [0, 1, 5, 10, 15] 操作方法 concat()：添加项 123var a1 = ['red', 'green', 'blue'];var a2 = a1.concat('yellow', ['black', 'brown']);console.log(a2) // ["red", "green", "blue", "yellow", "black", "brown"] slice()：截取 12var a = ["red", "green", "blue", "yellow", "black", "brown"];console.log(a.slice(1), a.slice(1, 4)) // ["green", "blue", "yellow", "black", "brown"] ["green", "blue", "yellow"] splice()：删除插入替换 1234var a = ["red", "green", "blue", "yellow", "black", "brown"];console.log(a.splice(2, 1), a); // 删除项; ["blue"] ["red", "green", "yellow", "black", "brown"]console.log(a.splice(1, 0, 'yellow', 'orange'), a); // 插入项; [] ["red", "yellow", "orange", "green", "yellow", "black", "brown"]console.log(a.splice(1, 1, 'red', 'purple'), a); // 替换项; ["yellow"] ["red", "red", "purple", "orange", "green", "yellow", "black", "brown"] 位置方法：indexOf() lastIndexOf() 接收两个参数：要查找的项和（可选）查找起点位置的索引；indexOf()从前往后查找，lastIndexOf()从后往前查找；返回要查找的项的位置，没找到则返回-1。 12345var a = ["red", "purple", "orange", "green", "red", "yellow", "black", "brown"];console.log(a.indexOf('red')); // 0console.log(a.lastIndexOf('red')); // 4console.log(a.indexOf('red', 1)); // 4console.log(a.lastIndexOf('red', 1)); // 0 迭代方法：every() some() filter() map() forEach()。 1234567891011121314151617181920212223242526var a = [1, 2, 3, 4, 5, 4, 3, 2, 1];var everyResult = a.every(function (item, index, array) &#123; return (item &amp;gt; 2);&#125;);console.log(everyResult); // falsevar someResult = a.some(function (item, index, array) &#123; return (item &amp;gt; 2);&#125;);console.log(someResult); // truevar filterResult = a.filter(function (item, index, array) &#123; return (item &amp;gt; 2);&#125;);console.log(filterResult); // [3, 4, 5, 4, 3]var mapResult = a.map(function (item, index, array) &#123; return (item * 2);&#125;);console.log(mapResult); // [2, 4, 6, 8, 10, 8, 6, 4, 2]var forEachResult = a.forEach(function (item, index, array) &#123; console.log(item);&#125;);console.log(forEachResult); // undefined 归并方法 12345678910111213var a = [1, 2, 3, 2, 1];var sum1 = a.reduce(function (prev, cur, index, array) &#123; console.log(index); // 1 2 3 4 return prev + cur;&#125;);console.log(sum1); // 9var sum2 = a.reduceRight(function (prev, cur, index, array) &#123; console.log(index); // 3 2 1 0 return prev + cur;&#125;);console.log(sum2); // 9 5.3 Date类型 创建日期对象：月份基于0（一月是0，二月是1…）。 123var d1 = new Date();var d2 = new Date(2015, 2, 5, 17, 55, 55); // 2015年3月5日下午5点55分55秒 获取调用时的日期和时间和毫秒数，可以用来分析代码。 1234var start = Date.now();doSomething();var stop = Date.now();var result = stop - start; 日期格式化方法：local表示以特定于地区的格式显示。 1234567var d2 = new Date(2015, 2, 5, 17, 55, 55);d2.toString(); // "Thu Mar 05 2015 17:55:55 GMT+0800 (CST)"d2.toDateString(); // "Thu Mar 05 2015"d2.toTimeString(); // "17:55:55 GMT+0800 (CST)"d2.toLocaleString(); // "2015/3/5 下午5:55:55"d2.toLocaleDateString(); // "2015/3/5"d2.toLocaleTimeString(); // "下午5:55:55" 5.4 RegExp类型 创建一个正则表达式： pattern部分是正则表达式 flags，标志，标明正则表达式的行为：g 全局模式；i 不区分大小写；m 多行模式 12var exp1 = / pattern / flagsvar exp2 = new RegExp('pattern', 'flags'); 实例方法： exec()：返回第一个匹配项信息的数组，数组第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串；还包含两个额外的属性，index 和 input。 12345678var text = "I'm DIYgod, and this is Anotherhome";var pattern = /and( this( is)?)?/gi;var matches = pattern.exec(text);console.log(matches.index); // 12console.log(matches.input); // I'm DIYgod, and this is Anotherhomeconsole.log(matches[0]); // and this isconsole.log(matches[1]); // this isconsole.log(matches[2]); // is test()：在模式与该参数匹配的情况下返回true，否则返回false。 1234var text = "I'm DIYgod, and this is Anotherhome";var pattern = /DIYgod/;var matches = pattern.test(text);console.log(matches); // true RegExp构造函数包含一些属性，适用于作用域中的所有正则表达式，记录一些最近一次正则表达式操作的信息。 5.5 Function类型 定义函数，函数实际上是 Function 类型的实例，因此函数也是对象。 123456789101112// 使用函数声明语法function f1 (n1, n2) &#123; return n1 + n2;&#125;// 使用函数表达式var f2 = function (n1, n2) &#123; return n1 + n2;&#125;;// 使用构造函数，不推荐var f3 = new Function('n1', 'n2', 'return n1 + n2'); 函数名是一个指向函数对象的指针。 123456function f1 (n1, n2) &#123; return n1 + n2;&#125;var f2 = f1;f1 = null;console.log(f2(1, 1)); // 2 ECMAScript中没有函数重载。 函数声明与函数表达式的区别：解释器会率先读取函数声明，并使其在执行任何代码之前可用（函数声明提升）；函数表达式必须等到解释器执行到它所在行才会真正被解释执行。 123456789console.log(f1(1, 1)); // 2function f1 (n1, n2) &#123; return n1 + n2;&#125;console.log(f2(1, 1)); // Uncaught TypeError: f2 is not a functionvar f2 = function(n1, n2) &#123; return n1 + n2;&#125; 函数内部属性 函数的arguments对象的callee属性：是一个指针，指向拥有这个arguments对象的函数。可以在递归时减小函数和函数名的耦合。 12345678910111213141516171819// 明显第二种写法更好一些function factorial1 (num) &#123; if (num &amp;lt;= 1) &#123; return 1; &#125; else &#123; return num * factorial1(num - 1); &#125;&#125;function factorial2 (num) &#123; if (num &amp;lt;= 1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num - 1); &#125;&#125; caller属性：保存着当前函数的函数的引用。 1234567function outer() &#123; inner();&#125;function inner() &#123; console.log(arguments.callee.caller); // function outer()...&#125;outer(); 函数属性和方法 length属性：表示函数希望接收的命名参数的个数。 1234function f (n1, n2) &#123; return n1 + n2;&#125;console.log(f.length); // 2 apply() call()：用来改变函数的this对象的值。 1234567891011121314151617181920window.color = 'red';var o = &#123; color: 'blue'&#125;;function sayColor (n1, n2) &#123; console.log(this.color); return n1 + n2;&#125;sayColor(1, 1); // redo.sayColor = sayColor;o.sayColor(); // blue// 使用call和apply可以消除对象与方法的耦合关系sayColor.call(window, 1, 1); // redsayColor.call(o, 1, 1); // bluesayColor.apply(window, [1, 1]); // redsayColor.apply(o, [1, 1]); // blue 5.6 基本包装类型Boolean类型、Number类型、String类型 暂时跳过 5.7 单体内置对象Global对象、Math对象 暂时跳过 &nbsp; 第六章 面向对象的程序设计6.1 理解对象 两种属性：数据属性和访问器属性。特性：描述属性的各种特征，是为了实现JavaScript引擎用的，不能直接访问。 数据属性，有4个特性： [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性。 [[Enumerable]]：表示能否通过 for-in 循环返回属性。 [[Writeable]]：表示能否修改属性的值。 [[Value]]：包含这个属性的数据值。 访问器属性，有4个特性： [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为数据属性。 [[Enumerable]]：表示能否通过 for-in 循环返回属性。 [[Get]]：在读取属性时调用的函数。 [[Set]]：在写入属性时调用的函数。 定义及读取特性：Object.defineProperty() Object.defineProperties() Object.getOwnPropertyDescriptor() 6.2 创建对象 工厂模式：虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题。 123456789101112function createPerson(name, age, job) &#123; var o = new Object(); o.name = name; o.age = age; o.job = job; o.sayName = function () &#123; console.log(this.name); &#125; return o;&#125;var p1 = createPerson('DIYgod', 20, 'Software Engineer');var p2 = createPerson('Anotherhome', 2, 'Website'); 构造函数模式。（构造函数应该以大写字母开头） 12345678910111213141516function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; this.sayName = function () &#123; console.log(this.name); &#125;&#125;var p1 = new Person('DIYgod', 20, 'Software Engineer');var p2 = new Person('Anotherhome', 2, 'Website');// p1 p2 分别保存着 Person 的一个不同的实例，这两个对象都有一个 constructor 属性，该属性指向Personconsole.log(p1.constructor); // function Person(name, age, job) &#123;...console.log(p1 instanceof Object); // trueconsole.log(p1 instanceof Person); // true 这种方法会经历4个步骤： 创建一个新对象 将构造函数的作用域赋给新对象（this指向这个新对象） 执行构造函数中的代码（为新对象添加属性） 返回新对象 构造函数的问题：每个方法都要在每个实例上重新创建一遍。 1console.log(p1.sayName === p2.sayName); // false 原型模式：每个函数都有一个 prototype 属性，这个属性是一个指针，指向一个对象（函数的原型对象），这个对象包含可以由该类型的所有实例共享的属性和方法。 12345678910111213// 组合使用构造函数模式与原型模式function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job;&#125;Person.prototype.sayName = function () &#123; console.log(this.name);&#125;var p1 = new Person('DIYgod', 20, 'Software Engineer');var p2 = new Person('Anotherhome', 2, 'Website');console.log(p1.sayName === p2.sayName); // true 理解原型对象： 只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，指向原型对象 默认所有原型对象都会获得一个 constructor 属性，指向 prototype 属性所在函数 调用构造函数创建新实例后，实例将有一个 proto 属性，指向构造函数的原型对象，指针叫[[Prototype]]，默认原型指向Object 实例与构造函数没有直接关系 读取属性：搜索先从对象实例本身开始，如果没找到，搜索原型对象 使用 isPrototype() 来检测构造函数和实例之间是否有关系 使用 hasOwnProperty() 来检测属性存在于实例中还是原型中 原型与 in 操作符 1234567// in操作符会在通过对象能够访问到属性时返回trueconsole.log('name' in p1); // true// 枚举属性for (var prop in p1) &#123; console.log(prop); // name age job sayName&#125; 用对象字面量重写原型对象 1234567function Person() &#123;&#125;Person.prototype = &#123; constructor: Person, // 这里重写了prototype，不再默认有constructor属性 name: 'DIYgod', age: 20&#125;; 动态原型模式、寄生构造函数模式、稳妥构造函数模式 6.3 继承 JavaScript中最常用的继承：组合继承。融合了原型链和构造函数的优点。 123456789101112131415161718192021function SuperType(name) &#123; this.name = name; this.color = ['red', 'blue', 'green'];&#125;SuperType.prototype.sayName = function () &#123; console.log(this.name);&#125;function SubType(name, age) &#123; SuperType.call(this, name); // 借用构造函数 this.age = age;&#125;SubType.prototype = new SuperType(); // 原型链SubType.prototype.constructor = SubType; // construcotr在上一句中被重写SubType.prototype.sayAge = function () &#123; console.log(this.age);&#125;var instance = new SubType('DIYgod', 20);instance.sayName(); // DIYgodinstance.sayAge(); // 20 确定原型和实例的关系。接上例： 12console.log(instance instanceof SuperType); // trueconsole.log(SuperType.prototype.isPrototypeOf(instance)); // true 原型式继承、寄生式继承、寄生组合式继承 第七章 函数表达式7.1 递归7.2 闭包 闭包是有权访问另一个函数作用域中的变量的函数。 （作用域链见4.2）在外部函数内部定义的内部函数将包含外部函数的活动对象添加到它的作用域中；外部函数执行完毕后，其活动对象不会被销毁，因为内部函数的作用域链仍然在引用这个活动对象；外部函数执行完毕后，内部函数仍然可以访问到其定义的所有变量。 123456789function outer () &#123; var name = 'DIYgod'; return function () &#123; console.log(name); &#125;&#125;var inner = outer();inner(); // DIYgodinner = null; // 解除对outer内部的匿名函数的引用，以便释放内存 闭包只能取得包含函数中任何变量的最后一个值。 123456789101112function createFunction () &#123; var result = []; for (var i = 0; i &amp;lt; 10; i++) &#123; result[i] = function () &#123; return i; &#125; &#125; return result;&#125;console.log(createFunction()[0]()); // 10console.log(createFunction()[1]()); // 10// 返回的都是同一个变量i 匿名函数的this通常会指向window。 12345678910var name = 'The Window';var object = &#123; name: 'My Object', getNameFunc: function () &#123; return function () &#123; return this.name; &#125; &#125;&#125;console.log(object.getNameFunc()()); // The Window 7.3 模仿块级作用域 用匿名函数来模仿块级作用域：第一个括号的作用是将函数声明转换成函数表达式（函数声明不能通过后面加括号来调用），第二个括号来调用这个函数。 12345(function () &#123; var i = 9; console.log(i); // 9&#125;)();console.log(i); // Uncaught ReferenceError: i is not defined 7.4 静态对象 任何在函数中定义的变量，都可以认为是私有变量。 有权访问私有变量和私有函数的公有方法称为特权方法。 12345678910111213141516function MyObject() &#123; // 私有变量和私有函数 var privateVariable = 'DIYgod'; function privateFunction() &#123; console.log('lalala'); &#125; // 特权方法 this.publicMethod = function () &#123; console.log(privateVariable); privateFunction(); &#125;;&#125;var o = new MyObject();o.publicMethod(); // DIYgod lalalao.privateFunction(); // Uncaught TypeError: o.privateFunction is not a function … 第十三章 事件13.1事件流 事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点；IE9、FireFox、Chrome 和 Safari 将事件一直冒泡到 window 对象。 事件捕获：由于老版本的浏览器不支持，因此很少有人使用事件捕获。 “DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。 13.2 事件处理程序 HTML事件处理程序：扩展作用域，在函数内部可以像访问局部变量一样访问document及该元素本身的成员，栗子： 1&amp;lt;input type="button" value="Click Me" onclick="alert(value)"&amp;gt; 如果是一个表单输入元素，则作用域中还会包含访问表单元素的入口，栗子： 1234&amp;lt;form method="post"&amp;gt; &amp;lt;input type="text" name="username" value=""&amp;gt; &amp;lt;input type="button" value="Echo username" onclick="alert(username.value)"&amp;gt;&amp;lt;/form&amp;gt; 缺点：①存在时差问题，解析函数之前就触发事件会引发错误 ②扩展处理程序的作用域链在不同浏览器中会导致不同结果 ③导致HTML和JavaScript代码紧密耦合。 DOM0级事件处理程序 12345678// 绑定事件处理程序var btn = document.getElementById('myButton');btn.onclick = function () &#123; console.log(this.id); // myButton&#125;// 删除事件处理程序btn.onclick = null; 以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。 DOM2级事件处理程序 addEventListener() 和 removeEventListener() 三个参数：要处理的事件名、作为事件处理程序的函数、在捕获阶段调用函数(true)还是在冒泡阶段调用函数(false，默认) 好处是可以添加多个事件处理程序，使用 addEventListener 添加的事件处理程序只能使用 removeEventListener移除，匿名函数无法移除。 IE事件处理程序 attachEvent() 和 detachEvent() 1234var btn = document.getElementById('myButton');btn.attachEvent('onclick', function () &#123; console.log(this === window); // myButton&#125;); 以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。 13.3 事件对象 在触发DOM上的某个事件时，会产生一个事件对象event，这个对象包含着所有与事件有关的信息。只有在事件处理程序执行期间，event对象才会存在，一旦事件处理程序执行完成，event对象就会被销毁。 属性/方法： currentTarget：正在处理事件的那个元素 target：事件的目标 type：事件类型 cancelable：可以阻止特定事件的默认行为 preventDefault()：阻止特定事件的默认行为 stopPropagation()：停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡 eventPhase：事件出于事件流的阶段 捕获阶段为1 处于目标对象为2 冒泡阶段为3 13.4 事件类型 UI事件、焦点事件、鼠标事件、滚轮事件、文本事件、键盘事件、合成事件、变动事件。 &nbsp; … 第二十一章 Ajax与Comet21.1 XMLHttpRequest对象 用法 12345678910111213var xhr = new XMLHttpRequest();xhr.onreadystatechange = function () &#123; if (xhr.readState === 4) &#123; if (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 300 || xhr.status === 304) &#123; console.log(xhr.responseText); &#125; else &#123; console.log('Request was unsuccessful: ' + xhr.status); &#125; &#125;&#125;;xhr.open('get', 'example.php', true);xhr.send(null); 创建XHR对象：new XMLHttpRequest(); open()：启动一个请求以备发送；3个参数：请求类型、请求的URL、是否异步发送请求（同步必须等到服务器响应后再继续执行）；不会真正发送请求。 send()：发送请求；1个参数：发送的数据；不需要发送数据则必须传入null。 XHR对象的属性： responseText 返回的文本 status 响应的HTTP状态。 HTTP状态码： 2xx 成功 3xx 重定向，304 Not Modified 表示请求的资源没有被修改，可以直接用浏览器中缓存的版本，302 Found 表示请求的资源现在临时从不同的URI响应请求 4xx 客户端错误，403 Forbidden，404 Not Found 5xx 服务器错误，500 Internal Server Error，503 Service Unavailable。 XHR的readyState属性： 0：未初始化 1：启动，已调用open() 2：发送，已调用send() 3：接收到部分响应数据 4：接收到全部响应数据 readystatechange事件：readystate属性的值由一个值变成另一个值，都会触发readystatechange事件。 21.4 跨域资源共享 CORS：使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。IE中要使用XDR对象实现，其他浏览器XHR对象原生支持。 图像Ping：只能发送GET请求；无法访问服务器的响应文本。 12345var img = new Image();img.onload = img.onerror = function () &#123; console.log('Done!');&#125;;img.src = 'http://api.hitokoto.us/rand?encode=jsc'; JSONP：两部分组成 回调函数和数据。 123456function myCallBack (data) &#123; console.log(data.hitokoto); // 像平常的你一样引发奇迹吧-&#125;var script = document.createElement('script');script.src = 'http://api.hitokoto.us/rand?encode=jsc&amp;amp;fun=myCallBack'; // 返回一个包含在函数调用中的JSON，调用了myCallBack函数：myCallBack(&#123;"hitokoto":"...","author":"...",....&#125;);document.body.insertBefore(script, document.body.firstChild); 缺点：安全性不可靠；不容易判断请求失败。 &nbsp; &nbsp; To Be Continued…]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[让咕咕机再次伟大]]></title>
    <url>%2F3116%2F</url>
    <content type="text"><![CDATA[.gugu-print{display:none;margin-top:20px}.gugu-btn{cursor:pointer;border:1px solid #eee;display:inline-block;padding:5px 10px;background:#fff;border-radius:4px}.gugu-login-btn-wrap{text-align:center}.gugu-login-btn{cursor:pointer}.gugu-user{display:none;text-align:center}.gugu-avatar{display:inline-block;height:50px;width:50px;background-size:contain;border-radius:50%}.gugu-info{padding-top:25px;font-weight:700;line-height:25px}.gugu-name{font-size:18px}.gugu-textarea{width:100%;height:100px;font-size:14px;padding:10px;box-sizing:border-box}.gugu-input{width:100%;font-size:14px;padding:10px;box-sizing:border-box}咕咕机的官方发送平台非常反人类，发送接口没有任何长度和频率限制，又可以匿名发送…所以经常被人刷垃圾信息…群里经常有人反馈但官方就是不改…好在咕咕机是开发接口的就这样我封装了一个增强版 API，开源在 GitHub： https://github.com/DIYgod/gugu-node-api特性：强制微博登录、不允许匿名、长度限制、发送频率限制、跨域限制、黑名单机制好了，点击下面按钮，登录后继续跟我表白吧！用户请求1234567$.ajax(&#123; url: 'https://api.anotherhome.net/gugu/account', xhrFields: &#123; withCredentials: true &#125;, success: function (data) &#123;&#125;&#125;); 打印 123456789101112131415161718192021222324252627282930$.ajax(&#123; url: 'https://api.anotherhome.net/gugu/print', type: 'post', data: JSON.stringify(&#123; type: '1', content: $('.gugu-textarea').val() &#125;), xhrFields: &#123; withCredentials: true &#125;, success: function (data) &#123; if (data) &#123; if (data.code &amp;&amp; data.msg) &#123; notie('error', data.msg); &#125; else if (data.msg) &#123; notie('success', data.msg); &#125; else &#123; notie('error', '打印失败'); &#125; &#125; else &#123; notie('error', '打印失败'); &#125; &#125;, error: function () &#123; notie('error', '打印失败'); &#125;&#125;); 发送 123456789101112131415161718192021222324252627282930$.ajax(&#123; url: 'https://api.anotherhome.net/gugu/print', type: 'post', data: JSON.stringify(&#123; type: '2', content: $('.gugu-input').val() &#125;), xhrFields: &#123; withCredentials: true &#125;, success: function (data) &#123; if (data) &#123; if (data.code &amp;&amp; data.msg) &#123; notie('error', data.msg); &#125; else if (data.msg) &#123; notie('success', data.msg); &#125; else &#123; notie('error', '打印失败'); &#125; &#125; else &#123; notie('error', '打印失败'); &#125; &#125;, error: function () &#123; notie('error', '打印失败'); &#125;&#125;);]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[百度前端技术学院编码挑战（TASK 0004）]]></title>
    <url>%2F2024%2F</url>
    <content type="text"><![CDATA[任务4（最终挑战）已经发布，任务deadline是6月10日至6月30日。TASK 0004 内容：https://github.com/baidu-ife/ife/tree/master/task/task0004我做的：https://github.com/DIYgod/ife-work/tree/master/task0004在线Demo： https://www.anotherhome.net/file/ife/task0004本次任务断断续续花费了20天（5.20-6.9）的时间。下面是我做 TASK 0004 过程中的一些记录。移动端适配“往前推2到3年，前端工程师还在忧心忡忡地想，移动互联网时代下，前端是不是没有生存空间了。但今天一看，在我们团队，前端工程师超过一半的工作都是在做移动端的Web或者APP的开发。移动Web或者APP在技术本质上是和做桌面端Web没有本质区别，但是移动端的坑那是非常的多，通过学习这部分内容，让你成为一名桌面移动通吃的前端开发工程师。”要求整个产品为SPA，刚开始完全没思路，看了两天AngularJS，最后还是决定自己实现。参考Gmail： 切换到另一个锚点的时候，只显示这个锚点对应的部分，其他部分用 display:none 隐藏起来。但是没看懂具体是怎么实现的。在console里执行 location.href = &#39;#mn&#39;; 也可以自动修改display，说明是绑定了锚点而不是通过点击事件来切换的。李胜菊苣告诉我是它通过监听url实现，类似MVC中的路由。感觉自己实现起来挺困难的。。。但是想到了另外一种方法，简单地说就是利用CSS3里的target伪类，demo如下：See the Pen jPMgre by DIYgod (@DIYgod) on CodePen.于是再改改CSS，就轻松实现了移动端的适配。 又是李胜菊苣带我飞，通过分析张鑫旭菊苣的Mobilebone框架（官网），我找到了更好的实现，以上实现作废23333。原理是这样的：切换锚点时会触发onhashchange事件，所以我就在onhashchange事件上绑定了一个函数，这个函数会记录切换前的锚点和切换后的锚点，通过判断前后锚点来做相应的动作，在切换过程中会给子页面加上 slide out in reverse 中的某几个class，通过这几个class实现滑动效果，具体实现见下面的CSS部分，切换完成后隐藏不需要显示的子页面和清除之前加上的class。就这样。JS部分：12345678910111213141516171819202122232425262728293031/* 滑动效果 */window.onhashchange = function () &#123; var newHash = location.hash; var oldEle = $('.' + oldHash.substr(1)); var newEle = $('.' + newHash.substr(1)); if ((oldHash == '#type' &amp;amp;&amp;amp; newHash == '#task') || (oldHash == '#task' &amp;amp;&amp;amp; newHash == '#details') ) &#123; oldEle.className += ' slide out'; newEle.className += ' slide in'; newEle.style.display = 'block'; oldEle.style.display = 'block'; setTimeout(function () &#123; newEle.style.display = 'block'; oldEle.style.display = 'none'; oldEle.className = oldEle.className.replace(/ slide out/, ''); newEle.className = newEle.className.replace(/ slide in/, ''); &#125;, 225); &#125; else if ((oldHash == '#task' &amp;amp;&amp;amp; newHash == '#type') || (oldHash == '#details' &amp;amp;&amp;amp; newHash == '#task')) &#123; newEle.className += ' slide reverse in'; oldEle.className += ' slide reverse out'; oldEle.style.display = 'block'; newEle.style.display = 'block'; setTimeout(function () &#123; oldEle.style.display = 'none'; newEle.style.display = 'block'; newEle.className = newEle.className.replace(/ slide reverse in/, ''); oldEle.className = oldEle.className.replace(/ slide reverse out/, ''); &#125;, 225); &#125; oldHash = newHash;&#125; CSS部分： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/* 滑动效果 from mobilebone */.slide.out, .slide.in &#123; animation-timing-function: ease-out; animation-duration: 225ms;&#125;.slide.in &#123; animation-name: slideinfromright;&#125;.slide.out &#123; animation-name: slideouttoleft;&#125;.slide.reverse.out &#123; animation-name: slideouttoright;&#125;.slide.reverse.in &#123; animation-name: slideinfromleft;&#125;/* keyframes for slidein from sides */@-webkit-keyframes slideinfromright &#123; from &#123; -webkit-transform: translate3d(100%, 0, 0); &#125; to &#123; -webkit-transform: translate3d(0, 0, 0); &#125;&#125;@keyframes slideinfromright &#123; from &#123; transform: translateX(100%); &#125; to &#123; transform: translateX(0); &#125;&#125;@-webkit-keyframes slideinfromleft &#123; from &#123; -webkit-transform: translate3d(-100%, 0, 0); &#125; to &#123; -webkit-transform: translate3d(0, 0, 0); &#125;&#125;@keyframes slideinfromleft &#123; from &#123; transform: translateX(-100%); &#125; to &#123; transform: translateX(0); &#125;&#125;/* keyframes for slideout to sides */@-webkit-keyframes slideouttoleft &#123; from &#123; -webkit-transform: translate3d(0, 0, 0); &#125; to &#123; -webkit-transform: translate3d(-100%, 0, 0); &#125;&#125;@keyframes slideouttoleft &#123; from &#123; transform: translateX(0); &#125; to &#123; transform: translateX(-100%); &#125;&#125;@-webkit-keyframes slideouttoright &#123; from &#123; -webkit-transform: translate3d(0, 0, 0); &#125; to &#123; -webkit-transform: translate3d(100%, 0, 0); &#125;&#125;@keyframes slideouttoright &#123; from &#123; transform: translateX(0); &#125; to &#123; transform: translateX(100%); &#125;&#125; 更新：实测这种方法在Safari下表现并不好。 再更新：补充上面：这种方法在貌似在移动端的Safari表现并不好，但在Mac端的Safari表现正常。 &nbsp; CSS Processing“CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。 这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。” 经过调研，我最后决定使用更广泛的Less。 根据慕课网教程（less即学即用）整理的Less思维导图： CSS部分重构完毕，终于可以复用了，DRY (Don’t repeat yourself)。 另外结合Grunt使用autoprefixer处理浏览器前缀，简直不能再爽。 &nbsp; 安全“安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。” 现有程序存在漏洞，比如在任务内容里输入以下内容然后保存，就会执行我们自定义的script脚本。 1&lt;iframe src=javascript:alert('xss');height=0 width=0&gt;&lt;/iframe&gt; 或 1&lt;img src="1" onerror=eval("\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29")&gt; 所以要简单做下 XSS 防护： 大多数情况对用户的输入进行处理，只允许输入合法的值，其它值一概过滤掉。然而更进一步的话，可以对标签进行转换。 对输入的内容做Html encode处理： 123456789function htmlEncode(str) &#123; return str.replace(/&amp;amp;/g, "&amp;amp;amp;") .replace(/&lt;/g, "&amp;lt;") .replace(/&gt;/g, "&amp;gt;") .replace(/"/g, "&amp;amp;quot;") .replace(/'/g, "&amp;amp;#x27;") .replace(/\//g, "&amp;amp;#x2f;") .replace(/\n/g, "&lt;br&gt;");&#125; 比如用户输入： 1&lt;iframe src=javascript:alert('xss');height=0 width=0&gt;&lt;/iframe&gt; 保存后最终存储的会是： 1&lt;iframe src=javascript:alert(&amp;amp;#x27;xss&amp;amp;#x27;);height=0 width=0&gt;&lt;/iframe&gt; 之后在展现时浏览器会对这些字符转换成文本内容显示，而不是一段可执行的代码。 另外自带SSL加成2333 &nbsp; 性能优化“在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。 但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。 整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。” &nbsp; 模块化“对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。” 经过调研，我决定使用RequireJS来实现。 将JS的引用方式改成这样 1&lt;script src="scripts/require.js" data-main="scripts/main"&gt;&lt;/script&gt; 再改写下JS，把JS分为四个模块：主模块 gtd util selector。但总感觉分得不太好。。。只能准备答辩时候问下导师了。 其中遇到了一个问题： 有这样一个HTML结构123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Demo&lt;/title&gt; &lt;style&gt; div &#123; height: 100px; width: 100px; background: #eee; margin: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div onclick="myClick();"&gt;&lt;/div&gt; &lt;div onclick="myClick();"&gt;&lt;/div&gt; &lt;div onclick="myClick();"&gt;&lt;/div&gt; &lt;script src="js/main.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 对其进行模块化改造之后，显而易见的myClick不会再是全局函数，所以无法这样调用。 于是我尝试在模块里进行click事件绑定： 1234567891011121314151617define(function () &#123; function init() &#123; var myDiv = document.getElementsByTagName('div'); for (var i = 0; i &lt; myDiv.length; i++) &#123; myDiv[i].addEventListener('click', myClick(myDiv[i])); &#125; myDiv[0].click(); &#125; function myClick(ele) &#123; ele.innerHTML = ele.innerHTML + 'click'; &#125; return &#123; init: init &#125;&#125;); 然而喜闻乐见地绑定错了，你们肯定看出来了，但是我当时没看出来，而且由于第5行那句间接调用了myClick(myDiv[i])，让我误以为是第10行调用的结果（这只是个Demo，当时的情况比这个复杂一些，这两句调用的结果的确差不多）。 这样的结果就是click绑定的函数在模块内可以调用（误以为），但在页面中点击却没反应。 然后我自作聪明地进行了一番推理：click事件绑定的myClick函数不是全局函数，只在模块内有效，而在页面中点击时会在全局调用myClick函数，所以没反应。 看似有道理却不是这样的，在V2EX发帖询问之后，热心网友 7anshuai 看出了绑定有误的问题。。 然后改成这样就好了： 1234567891011121314151617define(function () &#123; function init() &#123; var myDiv = document.getElementsByTagName('div'); for (var i = 0; i &lt; myDiv.length; i++) &#123; myDiv[i].addEventListener('click', myClick); &#125; myDiv[0].click(); &#125; function myClick() &#123; this.innerHTML = this.innerHTML + 'click'; &#125; return &#123; init: init &#125;&#125;); 期间我还尝试过在模块里主动将函数暴露在全局空间里，像这样： 1window.myClick = myClick; 虽然有效，但真是烂爆了，幸亏没就这样算了。。。 &nbsp; 6. 前端工程化 “业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。” 经过调研，最终决定采用 Yeoman, Bower, Grunt 三个工具结合来进行工程化改造。 根据慕课网教程（Grunt-beginner前端自动化工具）整理的思维导图： 用 Yeoman 新建一个 webapp 项目（需翻墙），安装其他需要的包，改改配置文件，然后就可以享受各种自动化工具带来的无比高效、震撼的体验啦~ 我这里主要对代码做了 less编译 处理CSS前缀 HTML、CSS、JS压缩 文件名添加md5值 这几个处理，其中处理前的文件在app文件夹，处理后的文件在disk文件夹。]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[百度前端技术学院编码挑战（TASK 0003）]]></title>
    <url>%2F1989%2F</url>
    <content type="text"><![CDATA[任务3已经发布，初级班的任务时间是从5月7日至5月18日，中级班为4月30日至5月10日。TASK 0003 内容：https://github.com/baidu-ife/ife/tree/master/task/task0003我做的：https://github.com/DIYgod/ife-work/tree/master/task0003在线Demo： https://www.anotherhome.net/file/ife/task0003/本次任务累计花费时间10天（5.6-5.16 ）下面是我做 TASK 0003 过程中的一些记录。1. JavaScript作用域 （参考 鸟哥：Javascript作用域原理 理解 JavaScript 作用域和作用域链）JavaScript中的函数运行在它们被定义的作用域里,而不是它们被执行的作用域里。JS 是有预编译的过程的, JS在执行每一段JS代码之前, 都会首先处理var关键字和function定义式(函数定义式和函数表达式)。在调用函数执行之前, 会首先创建一个活动对象, 然后搜寻这个函数中的局部变量定义,和函数定义, 将变量名和函数名都做为这个活动对象的同名属性, 对于局部变量定义,变量的值会在真正执行的时候才计算, 此时只是简单的赋为undefined。对代码优化的启示：从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如下面的代码：function changeColor(){ document.getElementById(“btnChange”).onclick=function(){ document.getElementById(“targetCanvas”).style.backgroundColor=”red”; };}这个函数引用了两次全局变量document，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到。这段代码可以重写如下： function changeColor(){ var doc=document; doc.getElementById(“btnChange”).onclick=function(){ doc.getElementById(“targetCanvas”).style.backgroundColor=”red”; };}这段代码比较简单，重写后不会显示出巨大的性能提升，但是如果程序中有大量的全局变量被从反复访问，那么重写后的代码性能会有显著改善。 &nbsp; 2. 高度自适应 （参考 CSS布局奇淫技巧之-高度自适应） 高度自适应不像宽度自适应那样简单，在兼容浏览器方面也稍微复杂一些。 然而直接写 height: 100%; 并没有什么卵用，要这样做： position: absolute;top: 60px;bottom: 0;&nbsp; 3. 莫名其妙出现又莫名其妙自己消失的空隙 事情是这样的，昨天（5月12日）页面一切正常，今天早上起床后并没改动代码，刷新了一下页面，页面居然变了，设置 overflow: scroll CSS属性的元素右侧和下侧都出现了空隙，如图所示： 而如果把overflow: scroll属性去掉空隙就消失。测试 Chrome Safari 均出现了这种情况，而且尝试了清空缓存，无解。于是将此时的代码commit并push到了github。 到了下午，同一标签页，同一页面，刷新，bug自己消失了，而此时代码与上午相比只有很少且无关紧要的改动，再次commit并push到github（所有改动在github有记录），再次截图： 注意：两次出现变化后都尝试测试了Chrome和Safari浏览器并清空了缓存。 到此为止毫无头绪并无法重现，实在没办法再深究下去。 猜测是Mac的Bug。 &nbsp; 4. JavaScript对象与JSON文本的相互转换 （参考 JavaScript对象与JSON字符串的相互转换 JSON 教程 - W3CSCHOOL） eval函数：JSON文本转换为JavaScript对象；调用JavaScript编辑器；非常快速，但可能会出现安全性问题 var obj = eval(‘(‘ + JSONTest + ‘)’);使用JSON解析器： JSON.parse 函数：将JSON文本转换为JavaScript对象 JSON.parse(text[, reviver])JSON.stringify 函数：将JavaScript对象转换为JSON文本 JSON.stringify(value[, replacer[, space]])&nbsp; 5. textarea 和 input 大小比预期大了一些 多谢李胜的帮助 这个问题其实很简单但我没想到，刚开始挺莫名其妙的，如下： See the Pen RPaJpb by DIYgod (@DIYgod) on CodePen. 问题是textarea和input比设置的宽度多了6px，强迫症看了浑身难受。实际上是因为这两个元素有默认的 2px padding和 1px border，在这两个元素的CSS部分加上 padding: 0;border: 0;或者更优雅一些 -webkit-box-sizing: border-box;-moz-box-sizing: border-box;box-sizing: border-box;就好了。 &nbsp; ☆ﾐ(o*･ω･)ﾉ完结散花 等待review]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[百度前端技术学院编码挑战（TASK 0002）]]></title>
    <url>%2F1982%2F</url>
    <content type="text"><![CDATA[TASK 0002 已经发布，初级班的任务时间是从4月24日至5月7日，中级班为4月18日至4月25日。TASK 0002 内容：https://github.com/baidu-ife/ife/tree/master/task/task0002我做的：https://github.com/DIYgod/ife-work/tree/master/task0002在线Demo： https://www.anotherhome.net/file/ife/task0002/task0002_1.html本次任务累计花费时间17天（4.19-5.6 ）下面是我做 TASK 0002 过程中的一些记录。1. JavaScript 的性能优化 （参考 JavaScript 的性能优化：加载和执行）· Web 开发人员一般习惯在 &lt;head&gt; 中加载外链的 JavaScript，接着用 &lt;link&gt; 标签用来加载外链的 CSS 文件或者其他页面信息。然而这种常规的做法却隐藏着严重的性能问题——脚本会阻塞页面其他资源的下载。因此推荐将所有&lt;script&gt;标签尽可能放到&lt;body&gt;标签的底部，以尽量减少对整个页面下载的影响。· 由于每个&lt;script&gt;标签初始下载时都会阻塞页面渲染，所以减少页面包含的&lt;script&gt;标签数量有助于改善这一情况。· 减少 JavaScript 对性能的影响其他方法见参考。&nbsp;2. == 与 === （参考 Javascript中双等号“==”和三等号“===”的区别 JavaScript里面三个等号和两个等号的区别 JavaScript编码规范）==：等于运算，但是不比较值的类型；===：完全等于运算，不仅比较值，而且还比较值的类型，只有两者一致才为真。百度JavaScript编码规范也规定：在 Equality Expression 中强制使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。因为使用 === 可以避免等于判断中隐式的类型转换。&nbsp;3. 类型检测 （参考 JavaScript编码规范 Javascript数组类型检测：编写更强壮的isArray函数 Javascript 判断函数类型完美解决方案）通用的简易做法：类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null// stringtypeof variable === ‘string’ // numbertypeof variable === ‘number’ // booleantypeof variable === ‘boolean’ // Functiontypeof variable === ‘function’ // Objecttypeof variable === ‘object’ // RegExpvariable instanceof RegExp // Arrayvariable instanceof Array // nullvariable === null // null or undefinedvariable == null // undefinedtypeof variable === ‘undefined’判断数组类型：得到对象的字符串表示，然后对比此字符串是否是’[object Array]’ function isArray(arr) { return Object.prototype.toString.call(arr) === ‘[object Array]’;}9.20更新：下面这样也可以 function isArray(arr) { return Array.isArray(arr);}判断函数类型：首先保证测试的对象存在，并将其序列化成含有“function”的字符串，这个是我们检测的基础(fn.constructor != String,fn.constructor != Array, and fn.constructor != RegExp)。另外，我们需要保证声明的函数不是一个DOM节点（fn.nodeName）。然后，我们就可以作toString测试。如果我们将一个函数转换成字符串，在一个浏览器中（fn+””）给我们的结果就像这样“function name(){…}”。现在，判断它是否为函数就很简单，仅仅只需要判断字符串中是否包含单词“function”。这很神奇，对于任何有问题的函数，在所有浏览器中都能得到我们所需要的结果。这个函数较之于传统的方法，运行速度有些不尽人意，作者（John Resig）建议我们保守使用。 function isFunction(fn) { return !!fn &amp;&amp; !fn.nodeName &amp;&amp; fn.constructor != String &amp;&amp; fn.constructor != RegExp &amp;&amp; fn.constructor != Array &amp;&amp; /function/i.test(fn + ‘’);}9.20更新：上面那种太麻烦，可以类似Array那样判断 function isFunction(fn) { return Object.prototype.toString.call(fn) === ‘[object Function]’;}复制Array的简单做法： var a1 = [1, 2, 3]var a2 = a1.slice(0);&nbsp; 4. 类型转换 （参考 JavaScript编码规范） number -&gt; string: num + ‘’;string -&gt; number: +str; var width = ‘200px’; // 要转换的字符串结尾包含非数字并期望忽略时，使用 parseIntparseInt(width, 10);-&gt; boolean: var num = 3.14;!!num;number 去除小数点: var num = 3.14;Math.ceil(num);&nbsp; 5. 对有序集合进行遍历时，缓存 length （参考 JavaScript编码规范） 虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。 for (var i = 0, len = elements.length; i &lt; len; i++) { var element = elements[i]; // ……}&nbsp; 6. document.body.scrollTop与document.documentElement.scrollTop获取滚动条滚动的距离的坑 （参考 document.body.scrollTop与document.documentElement.scrollTop兼容 用Javascript获取页面元素的位置 火狐、谷歌、IE关于document.body.scrollTop和document.documentElement.scrollTop 以及值为0的问题） 参考阮一峰的教程写了下面一段： if (document.compatMode == “BackCompat”){ var elementScrollLeft=document.body.scrollLeft;} else { var elementScrollLeft=document.documentElement.scrollLeft;}没想到遇到了坑，结果elementScrollLeft总是0，调试结果如下： 好坑啊，说好的如果有文档声明（即网页第一句的docType）的情况下，document.compatMode 的值等于 “CSS1compat”，标准浏览器是只认识documentElement.scrollTop的啊。 另外试了一下IE和Firefox，均可认documentElement.scrollTop，chrome的错！ 还好document.body.scrollTop与document.documentElement.scrollTop两者有个特点，就是同时只会有一个值生效。比如document.body.scrollTop能取到值的时候，document.documentElement.scrollTop就会始终为0；反之亦然。所以可以这样写： var scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;var scrollTop = document.body.scrollTop + document.documentElement.scrollTop;&nbsp; 7. 获取所有DOM元素 突然脑洞大开想到的 var ele = document.getElementsByTagName(‘*’);&nbsp; 8. 真假判断 对象总为true，基础类型看是否为空 !![] // true!!{} // true!!’’ // false!!0 // false容易把空数组误以为是false！ 容易把空数组误以为是false！ 容易把空数组误以为是false！ 重要的事情要说三遍！ &nbsp; 9. 递归获取所有子元素 这个是有问题的，只能获取到下一级的子元素： var childs = function (element) { var allchilds = []; var childn = element.childNodes; if (childn.length !== 0) { for (var i = 0, len = childn.length; i &lt; len; i++) { allchilds.push(childn[i]); allchilds.concat(childs(childn[i])); } } return allchilds;}但如果改成这样就能获取所有子元素了： var allchilds = [];var childs = function (element) { var childn = element.childNodes; if (childn.length !== 0) { for (var i = 0, len = childn.length; i &lt; len; i++) { allchilds.push(childn[i]); allchilds.concat(childs(childn[i])); //或者 childs(childn[i]); } } return allchilds;}第一段代码出现问题的原因未知，已经想一晚上了，并无进展。 另外调试过程中发现的诡异现象： 解释下：递归调用时返回值allchilds是正确的，但返回到上一层时并没有加到上一层的allchilds中。 月月 告诉我这句话有问题！ allchilds.concat(childs(childn[i]));w3school如是说：concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。仅仅会返回被连接数组的一个副本。仅仅会返回被连接数组的一个副本。 一切都说通了。。 所以根本不关allchilds声明位置的事，debug的方向一直都不对，要这样改： var childs = function (element) { var allchilds = []; var childn = element.childNodes; if (childn.length !== 0) { for (var i = 0, len = childn.length; i &lt; len; i++) { allchilds.push(childn[i]); allchilds = allchilds.concat(childs(childn[i])); } } return allchilds;}万万没想到，在 月月 李胜 蛋炒饭 的帮助下千辛万苦终于完成了这个小函数。。。 后续：突然想到这样就能轻易获取到 element.getElementsByTagName(‘*’);已吐血 &nbsp; 10. 数组合并 （参考 JavaScript concat() 方法） 重要的事情要另外单独说。因为被坑惨了。 concat() 方法用于连接两个或多个数组。 该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。 该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。 该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。 错误用法： arr1.concat(arr2);正确用法： arr1 = arr1.concat(arr2);&nbsp; 11. 事件代理 （参考 javascript事件代理） 在编程中，如果我们不想或不能够直接操纵目标对象，我们可以利用delegate创建一个代理对象来调用目标对象的方法，从而达到操纵目标对象的目的。毋庸置疑，代理对象要拥有目标对象的引用。 可以用事件代理的方法来优雅地用一个函数代理另一个函数，比如： var delegate = function (method) { return function() { return method.apply(null, arguments); }} var on = delegate(addEvent);var un = delegate(removeEvent);这样就能优雅地用 on un 函数代理 addEvent removeEvent 函数了。这样实现了目标对象的隐藏，这对于我们保护一些核心对象是非常有用的。 我错了，直接这样就行了。。 &nbsp; var on = addEvent;var un = removeEvent;&nbsp; 12. Object相关 （参考 js的Object到底是什么呢?） Array、Boolean、Date、Function、Number等等对象，其实都是从Object来的，它们的祖先都是Object。它们表现不同的语言特性，比如Array有被自动管理的length属性，Boolean只有true或false取值，Date表示时间结构，Function可以被运行，都是它们的原始类型(valueOf)赋予它们的能力。 所以有些有趣的东西： function f() { alert(‘f1’);}f.c = function() { alert(‘c1’);} f();f.c();可以给函数设置一个也是函数的属性。 &nbsp; 13. JavaScript正则表达式分组 （参考 JavaScript 正则表达式 选择、分组和引用） 例： function getCookie(cookieName) { var re = new RegExp(cookieName + ‘=(.?)($|;)’); return re.exec(document.cookie)[1];}其中re.exec(document.cookie)是一个数组，第一个元素是正则式所有匹配出的字符，第二个元素是匹配的第一个分组，即第一个括号里的内容：(.?) 分组就就是正则表达式中的子表达式，可以用来获取正则式匹配出的字符串中的特定部分。 9.20更新：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的： var re = new RegExp(“\w+”);var re = /\w+/;&nbsp; 14. JavaScript跨域 （参考 JavaScript跨域总结与解决办法） JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。 具体限制及解决办法见参考。 &nbsp; 15. JavaScript月份多出一 （参考 JS 中 new Date 怎么就多一个月了？ JavaScript——搞甘特图使用 Date 对象时遇到的问题） 明明设置的时5月，结果却是6月。 实际中，我们数月份不是从 0 开始，但是 JavaScript 却是从 0 开始。JS中的0月是我们的1月，JS中的1月是我们的2月… 所以设置月份时记得减一，获取月份时记得加一。。 &nbsp; 15. 计时器不会阻塞代码执行 如图 我的本意是执行完 a() 再输出b，没想到b先输出了，从这里也可以推测出，计时器并不会阻塞后面语句的执行。 &nbsp; ☆ﾐ(o*･ω･)ﾉ完结散花 等待review]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[百度前端技术学院编码挑战（TASK 0001）]]></title>
    <url>%2F1969%2F</url>
    <content type="text"><![CDATA[百度Web前端技术学院（Baidu Institute of Front-End Technology简称IFE）是一个由百度EFE团队、百度人力资源部校园招聘组联合出品的、面向在校大学生的前端培训组织，借助百度大量优秀的前端工程师以及丰富的前端知识积累，帮助大学生们更加高效、系统地学习Web前端技术。百度Web前端技术学院已正式开学，我有幸成为了第一期的初级班学员，可以和菊苣们一起玩耍啦～想一起学但是没录取的可以加群：438966405TASK 0001 发布，初级班Review提交截止时间为4月23日，中级班为4月16日。TASK 0001 内容：https://github.com/baidu-ife/ife/tree/master/task/task0001（还设置了1-6小节照顾我这样的弱菜，大赞～）我做的：https://github.com/DIYgod/ife-work/tree/master/task0001在线Demo： https://www.anotherhome.net/file/ife/task0001/本次任务累计花费时间6天（4.13-4.19 ）下面是我做 TASK 0001 过程中的一些记录。&nbsp;1. position 属性（参考 CSS 定位-W3School、CSS+DIV布局中absolute和relative）position 属性比较重要，但自己看的时候没看很明白，马马虎虎略过了，于是做任务的时候就出了莫名其妙的问题，在蛋炒饭的帮助才发现是因为 position 属性没搞懂。用自己的话简单总结一下：position属性有四个属性值：static relative absolute fixed。 static 为默认，元素框正常生成，出现在 normal flow 中；relative 使元素框偏移某个距离，原本所占的空间仍保留，也是出现在 normal flow 中；absolute 使元素框跳出 normal flow 完全删除，并相对于其包含块定位，原本所占的空间消失；fixed 同样使元素框跳出 normal flow，相对于浏览器窗口进行定位。&nbsp;2. 浮动元素及其后续非浮动元素填充的位置（参考 CSS float 浮动属性）当时的情况是这样的：HTML部分：&lt;div id=”div6”&gt; &lt;div class=”div6-a”&gt;&lt;/div&gt; &lt;div class=”div6-b”&gt;&lt;/div&gt; &lt;div class=”div6-c”&gt;&lt;/div&gt;&lt;/div&gt;CSS部分： #div6 { margin-bottom: 10px;}.div6-a { float: left; width: 50px; height: 50px; background: #f00;}.div6-b { margin: 0 50px; height: 50px; background: #00f;}.div6-c { float: right; width: 50px; height: 50px; background: #ff0;}结果出现问题： 黄色的C元素跑到下一行去了 尝试了下先把C元素flow到右侧再填充B元素，即： HTML部分： &lt;div id=”div6”&gt; &lt;div class=”div6-a”&gt;&lt;/div&gt; &lt;div class=”div6-c”&gt;&lt;/div&gt; &lt;div class=”div6-b”&gt;&lt;/div&gt;&lt;/div&gt;达到预期结果： 原因：浮动元素在文档流空出的位置，由后续的(非浮动)元素填充上去：块级元素直接填充上去，若跟浮动元素的范围发生重叠，浮动元素覆盖块级元素；内联元素则有空隙就插入。 所以加入C元素后再加入B元素时，B元素直接填充到A C元素的同一行；加入B元素后再加入C元素时，由于B元素一行没有空隙，C元素浮动到下一行。 &nbsp; 3. 负边距(negative margin)（参考 CSS布局奇淫巧计之-强大的负边距） 圣杯布局、双飞翼布局都用了负边距对浮动元素的影响的原理，某个元素虽然写在了后面，但可以通过负边距让它在浏览器显示的时候是在前面的，具体见参考，写得非常好。 &nbsp; 4. 清除浮动（参考 那些年我们一起清除过的浮动） 做浮动布局那题时，装蓝色方块的红色容器总是显示不出来，用F12看到红色容器的高度不知道为什么变成了0，于是参考双飞翼布局的代码，发现双飞翼布局在父级元素设置了一个 overflow: hidden 的属性，我尝试了一下给红色容器也加上 overflow: hidden 属性，高度居然神奇地可以自适应了，十分不理解。 经过蛋炒饭的指点知道了，子级元素都是 flow 属性的时候，会造成父级元素没有高度，而 overflow: hidden 有清除浮动的效果，所以加上后会使父级恢复高度（overflow: hidden 清除浮动的原理见参考）。 &nbsp; 到此为止，花了两天时间，已经完成了1-6节实战小练习的内容，成果见：https://www.anotherhome.net/file/ife/task0001-16/task0001.html 下面就是综合练习了，看起来就好难。。 &nbsp; 5. absolute 元素的定位（参考 CSS 中，为什么绝对定位（absolute）的父级元素必须是相对定位（relative）？-知乎） 写第七题中导航栏的时候需要用到绝对定位，但绝对定位是相对谁定位呢？之前一直没搞清楚。 absolute 元素的定位是上溯父级元素，找第一个不是 static 的元素，以其为 absolute 的基准。如果父级元素全都没有设置（static），则里面的绝对定位以 body 定位。 所以一般的做法是将想作为基准的父级元素加上 position: relative 属性。 &nbsp; 6. 图片的 4px 空白间距（参考 Why does container div insist on being slightly larger than its content? -stackoverflow） 插入顶部图片时候发现了一个很诡异的问题，见图： 图片高度500px 父级高度504px 多出来4px。。。 网上搜了下基本上都是因为设置inline-block元素才出现的空白间距，但我没有inline-block元素呀。但是可以通过类似的方法消除4px间距，我用了设置父元素的字体大小为0的方法解决。 我已经将上述问题的代码化简后传到了服务器上，有兴趣的可以帮我看一下：https://www.anotherhome.net/file/ife/task0001-7_problem/ Update：多谢 天然傲娇，原因已了解，&lt;img&gt; 默认是inline元素（内联元素、行内元素），计算高度时要加上 line-height 的默认值（4px）。 来自stackoverflow： Since an &lt;img&gt; is an inline element by default, it’s height is calculated differently as related to the default line-height value. On inline elements, the line-height CSS property specifies the height that is used in the calculation of the line box height. On block level elements, line-height specifies the minimal height of line boxes within the element.&nbsp; 7. CSS控制DIV两列左右高度一致（参考 CSS控制DIV两列左右高度一致） content为父级元素，多个post作为子级元素，目的是使post高度保持一致。 .content { width: 980px; overflow: hidden;} .post { width: 320px; float: left; margin-bottom: -10000px; padding-bottom: 10000px; background: #fff;}我是这样理解的：通过 padding-bottom: 10000px，外边距和内边距同时加10000px，再通过 margin: -10000px，内边距同时减10000px，然后，在没达到同一高度时，较长的元素的外边距跟着减小，而较短的元素外边距不变，达到同一高度后，较长元素和较短元素外边距同时减小。结果就高度一致了。 &nbsp; 8. tr边框（参考 CSS如何修改tr边框属性） 像这样在CSS中直接给tr设置边框不起作用，而如果指定td的边框又会有间断的现象出现 tr { border: 1px solid #000;}如果同时给table设置border-collapse属性，tr设置的边框就能出现了 table { border-collapse: collapse;} tr { border: 1px solid #000;}原因见参考 &nbsp; TASK0001 全部完成： 第七题 Demo：https://www.anotherhome.net/file/ife/task0001/ 1-6题 Demo：https://www.anotherhome.net/file/ife/task0001-16/task0001.html &nbsp; ☆ﾐ(o*･ω･)ﾉ完结散花 等待review &nbsp; Review结束，根据导师的建议修改及总结如下： 9. 删除 lang=”zh-CN” （参考 网页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”？） 修改： &lt;head lang=”zh-CN”&gt; &lt;head&gt;单一的 zh 和 zh-CN 均属于废弃用法。 看了下百度 淘宝 微博等网站均没有写lang属性，可以放心删掉啦。 &nbsp; 10. 使用h1标签 （参考 HTML之h1 h2 h3 h4标签知识经验篇 - DIVCSS5） 修改： &lt;div class=”logo”&gt; &lt;a href=”index.html”&gt;&lt;img src=”img/logo.png” alt=”logo” width=”200px”&gt;&lt;/a&gt;&lt;/div&gt; &lt;h1 class=”logo”&gt; &lt;a href=”index.html”&gt;&lt;img src=”img/logo.png” alt=”logo” width=”200px”&gt;&lt;/a&gt;&lt;/h1&gt;h1 h2 h3 h4 标题标签常常使用在一个网页中唯一标题、重要栏目、重要标题等情形下。 其中 h1 在一个网页中最好只使用一次，如对一个网页唯一标题使用。 在一个网页中可以适当使用h1 h2 h3 h4标签，有利于网页的重点部分突出，同时也利于搜索引擎排名。 看到淘宝也是这样做的，在logo的代码外包了一个h1标签。 &nbsp; 11. 其他修改 没想到在a标签上用class，多套了一层div： &lt;div class=”icon-github”&gt; &lt;a href=”https://github.com/DIYgod“ target=”_blank”&gt;&lt;img src=”img/icon-github.png”&gt;&lt;/a&gt;&lt;/div&gt; &lt;a class=”icon-github” href=”https://github.com/DIYgod“ target=”_blank”&gt;&lt;img src=”img/icon-github.png”&gt;&lt;/a&gt;命名： &lt;div class=”description”&gt; &lt;div class=”banner”&gt;将&lt;hr&gt;用border代替：“不推荐&lt;hr&gt;，用上下容器的border来代替吧当我不需要这条线的时候，只需要改变样式即可，不需要改动html” 使用ul li或者dl之类的列表语义的dom。 &nbsp;]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一些让我开心的小事情]]></title>
    <url>%2F2505%2F</url>
    <content type="text"><![CDATA[手机满格的电量过马路时路口亮起的绿灯下雨时穿着雨靴踩出的水花读到一首特别喜欢的诗一抬头就看到的满天繁星收到朋友寄来的信件在马路上想起好笑的事情偷偷笑出来下雨被困好朋友来送伞做了一个好梦趴在桌子上温暖的灯光打在脸上屏幕亮起她的姓名收拾整整齐齐的屋子西瓜最中间的那一口糖拌西红柿的汤吃完薯片的手穿着自己特别喜欢的衣服走在街上微小微的微笑每周更新的动漫和美剧厨房里飘来饭菜的香有我的快递微凉的晚上一个人走在街上雨天穿着长衣长袖看窗外坐在屋顶看日落偶遇一朵可爱的小花听到一首喜欢的歌上映一部喜欢的电影写下这些小事&nbsp;小伙伴的补充：穿女装被网红评论期末考试没挂科 o_o~认识你们。女朋友写出的代码没bug自己的意见被老师采纳在酒吧或者茶馆听到自己喜欢的音乐逛超市不用排队干净的屏幕和键盘被某站采纳意见并公开感谢父母尚在，儿孙满堂她在看我楼梯转角你的微笑下雨天发现包里正好有伞发现一首相见恨晚的歌(๑•̀ㅁ•́ฅ)]]></content>
      <categories>
        <category>闲言语</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Service Workers 实现网站加速和离线缓存]]></title>
    <url>%2F2954%2F</url>
    <content type="text"><![CDATA[最近看到了 Service Workers 这个东西，它可以根据配置为用户缓存网站静态与动态资源：截获用户的所有网络请求，根据缓存配置来决定是从缓存还是网络获取相应资源，从而可以极大提高网页的加载速度。优点有可定制性高、不需要服务端支持、效果显著。最后的效果就是当你第二次访问我的网站时只会加载大约80k 的资源（除去 AdSense 的情况下），这其中包括了所有图片和音频视频，这 80k 主要是 HTML 和我使用的 DPlayer 的 API。甚至可以在断开网络时访问（剪断网线试试吧）：当然局限性也是有的：只支持 HTTPS，因为可以截获用户的网络请求，需要在一个安全的环境。兼容性不太好，点击查看兼容性报告，目前只有 Chrome Firefox Opera 和部分 Android 浏览器 支持。使用方法网上有很多教程，这里不赘述了，推荐这几篇吧：使用service worker+sw-precache实现网站加速使用Service worker实现加速/离线访问静态blog网站Service Workers 与离线缓存]]></content>
      <categories>
        <category>分享境</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一个完整编译器的实现(二) 语法分析]]></title>
    <url>%2F1764%2F</url>
    <content type="text"><![CDATA[1 系列说明GitHub地址 各阶段源码 各阶段说明集合2 语法分析说明语法：组合单词以形成词组 从句 或句子的方法。经过词法分析，我们已经可以将输入文本识别成一个个的单词，本阶段的目标是将这些单词识别成句子，判断单词的这种组合形式是否符合我们定义的语法。2.1 用文法来定义语法语法分析需要由递归而获得的额外的表示能力，显然正则表达式已经不能满足我们的需求。事实上，文法也可以用来描述词法单词的结构，但正则表达式已经可以满足需求，这时使用正则表达式更为简练。2.2 LR(1) 分析法@%……￥&amp;%#￥太复杂不想说总之，LR(1) 是一种非常非常强大的分析算法，能够解决很多归约-归约冲突，大多数用上下文无关文法描述其语法的程序设计语言都有一个 LR(1) 文法。2.3 使用 Yacc 生成语法分析器构造LR(1)分析表的算法简单得足以用计算机来自动完成，而且手工构造十分麻烦无趣，所以使用Yacc是一个明智的决定。类似Lex，Yacc规范分为三部分%{…%}…%%…第一部分同Lex，包含include和声明 第二部分定义从词法分析中接收的终结符，开始符号，优先级等 第三部分定义文法及语义动作，语法分析阶段只定义文法，语义动作到语义分析时候再完成。 2.3.1 冲突 Yacc 选择移近来解决移进-归约冲突，选择使用在文法中先出现的规则来解决归约-归约冲突。 2.3.2 优先级指导 定义优先级是为了解决二义性，这样写文法的时候方便的多。 Yacc在第二部分可以假如优先级指导命令 %left COMMA%right PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVIDEASSIGN ASSIGN%left OR%left AND%left EQ NEQ%left LE GE LT GT%left PLUS MINUS%left TIMES DIVIDE MOD%right INC DEC NOT%left LPAREN RPAREN LBRACK RBRACK自上而下优先级降低，left right 说明单词是左结合还是右结合。 3 具体实现 语法分析器和改进过的词法分析器源码见文章开头。 进行到本阶段，编译器发展为四个模块： 1.错误处理模块（errormsg.c errormsg.h）：用来产生含文件名和行号的报错信息2.常用工具模块（util.c util.h）：定义一些常用的函数3.词法分析模块（simplec.lex）：通过Lex进行词法分析4.语法分析模块（simplec.yacc）：通过Yacc进行语法分析 其中上一阶段的 token.h 已经不再需要，作为代替，Yacc会根据我们写的文法的单词规范自动生成一个与单词相关的头文件 y.tab.h ；parsetest.c是一个驱动程序，正常情况下会输出 Parsing successful! 附：ANSI C grammar (Lex) ANSI C grammar (Yacc) &nbsp; 语法分析 Done.]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一个完整编译器的实现(一) 词法分析]]></title>
    <url>%2F1754%2F</url>
    <content type="text"><![CDATA[GitHub地址 各阶段源码 各阶段说明集合为了将一个程序从一种语言翻译成另一种语言，编译器必须首先把程序的各种成分拆开，并搞清其结构和含义，然后再用另一种方式把这些成分组合起来。编译器的前端执行分析，后端进行合成。而分析一般分为3种：词法分析 语法分析 语义分析本阶段进行的是词法分析，目的是将输入文件分解成一个个独立的词法符号，即单词。根据虎书的提示，在本阶段分了三个模块：1.错误处理模块（errormsg.c errormsg.h）：用来产生含文件名和行号的报错信息2.词法分析模块（lexical.lex token.h）：通过Lex进行词法分析3.常用工具模块（util.c util.h）：定义一些常用的函数词法分析模块与错误处理模块：两者通过 errormsg.h 中声明的变量和函数进行通信：EM_tokPos 变量传递每个单词以字符为单位的位置；EM_newline()函数记录行号；EM_error() 输出报错信息。错误处理模块与常用工具模块：错误处理模块使用 util.h 中声明的 checked_malloc() 分配内存函数另外还包含了 驱动程序（driver.c）测试文件（test.c） makefile下面主要介绍本阶段最重要的词法分析模块。tokens.h：定义词法单词常量以及yylvaltypedef union { int ival; char cval; double dval; string sval; } YYSTYPE;extern YYSTYPE yylval;上述代码定义了yylval，yylval是一个表示不同语义值的集合，其中的ival cval dval sval 分别用来保存 整数 字符 浮点数 字符串 单词的语义值。 # define ID 128 define STRING 129define COMMA 130define COLON 131define SEMICOLON 132define LPAREN 133define RPAREN 134define LBRACK 135define RBRACK 136define LBRACE 137define RBRACE 138define DOT 139define PLUS 140define MINUS 141define TIMES 142define DIVIDE 143… … … …这段定义了一些常数，这些常数供 lexical.lex 使用，它们指明被匹配的是何种类型的单词。 lexical.lex：Lex的源文件，可以通过Lex生成一个词法分析器 Lex是一个可以将正则表达式转换城词法分析器的生成器，它由词法规范生成一个C程序（lex.yy.c）。该规范包含一个正则表达式和一个动作。这个动作将单词类型（可能和其他信息一起）传给编译器的下一处理阶段。 %{ #include &lt;string.h&gt; #include “util.h” #include “tokens.h” #include “errormsg.h” int charPos=1; //记录每个单词的位置 int yywrap(void) //Lex函数, 返回1就停止解析, 可以用来解析多个文件{ charPos=1; return 1;} void adjust(void) //计算单词位置, 并通过EM_tokPos传给错误信息模块{ EM_tokPos=charPos; charPos+=yyleng;} %} %%[“ “”\t”] {adjust(); continue;}“\n” {adjust(); EM_newline(); continue;}(\”)([A-Za-z0-9])(\”) {adjust(); yylval.sval = yytext; return STRING_V;}string {adjust(); return STRING;}‘[A-Za-z0-9]’ {adjust(); yylval.cval = yytext[1]; return CHAR_V;}char {adjust(); return CHAR;}short {adjust(); EM_error(EM_tokPos, “暂不支持short类型”);}-?[0-9]+ {adjust(); yylval.ival=atoi(yytext); return INT_V;}int {adjust(); return INT;}unsigned {adjust(); EM_error(EM_tokPos, “暂不支持unsigned类型”);}long {adjust(); EM_error(EM_tokPos, “暂不支持long类型”);}float {adjust(); EM_error(EM_tokPos, “暂不支持float类型”);}-?[0-9]+(.[0-9]+)? {adjust(); yylval.dval = atof(yytext); return DOUBLE_V;}do {adjust(); return DO;}double {adjust(); return DOUBLE;}struct {adjust(); return STRUCT;}union {adjust(); return UNION;}void {adjust(); return VOID;}enum {adjust(); return ENUM;}signed {adjust(); EM_error(EM_tokPos, “暂不支持signed类型”);}conust {adjust(); return CONUST;}volatile {adjust(); EM_error(EM_tokPos, “暂不支持volatile”);}typedef {adjust(); return TYPEDEF;}auto {adjust(); EM_error(EM_tokPos, “暂不支持auto”);}register {adjust(); EM_error(EMtokPos, “暂不支持register”);}static {adjust(); return STATIC;}extern {adjust(); return EXTERN;}break {adjust(); return BREAK;}case {adjust(); return CASE;}continue {adjust(); return CONTINUE;}default {adjust(); return DEFAULT;}else {adjust(); return ELSE;}for {adjust(); return FOR;}goto {adjust(); return GOTO;}if {adjust(); return IF;}return {adjust(); return RETURN;}switch {adjust(); return SWITCH;}while {adjust(); return WHILE;}sizeof {adjust(); return SIZEOF;}[A-Za-z]+[[0-9]+] {adjust(); return ARRAY;}[A-Za-z]([A-Za-z0-9_]) {adjust(); yylval.sval = yytext; return ID;}“,” {adjust(); return COMMA;}“:” {adjust(); return COLON;}“;” {adjust(); return SEMICOLON;}“(“ {adjust(); return LPAREN;}“)” {adjust(); return RPAREN;}“[“ {adjust(); return LBRACK;}“]” {adjust(); return RBRACK;}“{“ {adjust(); return LBRACE;}“}” {adjust(); return RBRACE;}“.” {adjust(); return DOT;}“+” {adjust(); return PLUS;}“-“ {adjust(); return MINUS;}“*” {adjust(); return TIMES;}“/“ {adjust(); return DIVIDE;}“!=” {adjust(); return NEQ;}“==” {adjust(); return ASSIGN;}“=” {adjust(); return EQ;}“&lt;=” {adjust(); return LE;}“&lt;” {adjust(); return LT;}“&gt;=” {adjust(); return GE;}“&gt;” {adjust(); return GT;}“&amp;” {adjust(); return AND;}“|” {adjust(); return OR;}第一部分，即位于%{…%}之间的部分，包含有若干由此文件其余部分C代码使用的include和声明。 第二部分，即位于%}…%%之间的部分，包含正则表达式的简写形式和状态说明，比如你可以写上 digits [0-9]+那么第三部分中就可以用{digits}代替[0-9]+了。 第三部分，即位于%%后面的部分，包含正则表达式和动作。每个动作返回一个 int 类型的值（token.h定义的常数），指出匹配的是哪一种单词。其中有两条匹配的原则来消除二义性：规则优先：对于一个特定的最长初始子串，第一个与之匹配的正则式决定这个子串的单词类型；最长匹配：通过规则优先确定正则式之后，子串取与正则式匹配的最长的字符串。 几个变量：yytext是正则式匹配的字符串；yyleng是所匹配的字符串的长度；charPos追踪每一个单词的位置，并告知EM_tokPos。 &nbsp; 词法分析 Done.]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一个完整编译器的实现]]></title>
    <url>%2F1751%2F</url>
    <content type="text"><![CDATA[图灵生机器，机器生汇编，汇编生 C，C 生万物(来自知乎用户 Joy Neop)本系列将展示一个完整编译器从无到有的实现过程.目标是从一个C语言的不完全子集翻译到x86汇编语言, 将借助 Lex Yacc LLVM 等工具, 另外暂定实现垃圾回收及面向对象.全部代码托管在 GitHub. 各阶段的源代码在 这里 查看.主要参考 虎书(《现代编译原理–C语言实现》), 根据此书, 暂将实现分为11个阶段: 词法分析 语法分析 语义动作 语义分析 栈帧布局 翻译 规范化 指令选择 控制流分析 数据流分析 寄存器分配 代码流出.已完成：《一个完整编译器的实现—词法分析 | Anotherhome》《一个完整编译器的实现—语法分析 | Anotherhome》To be continued…]]></content>
      <categories>
        <category>创作集</category>
      </categories>
  </entry>
</search>
